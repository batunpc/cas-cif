"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

"""Table containing the different status that a change can have"""
type ChangeStatus implements Node {
  """Whether that status is active"""
  active: Boolean

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByUpdatedBy: CifUser

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The name of the status, e.g. "pending", "saved", ..."""
  status: String!

  """
  Whether that status should trigger a save of the record described by the change
  """
  triggersSave: Boolean

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `ChangeStatus` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ChangeStatusCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `triggersSave` field."""
  triggersSave: Boolean

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ChangeStatus` object types. All fields are combined with a logical ‘and.’
"""
input ChangeStatusFilter {
  """Filter by the object’s `active` field."""
  active: BooleanFilter

  """Checks for all expressions in this list."""
  and: [ChangeStatusFilter!]

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByDeletedBy` relation."""
  cifUserByDeletedBy: CifUserFilter

  """A related `cifUserByDeletedBy` exists."""
  cifUserByDeletedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `formChangesByChangeStatus` relation."""
  formChangesByChangeStatus: ChangeStatusToManyFormChangeFilter

  """Some related `formChangesByChangeStatus` exist."""
  formChangesByChangeStatusExist: Boolean

  """Negates the expression."""
  not: ChangeStatusFilter

  """Checks for any expressions in this list."""
  or: [ChangeStatusFilter!]

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `triggersSave` field."""
  triggersSave: BooleanFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `ChangeStatus`"""
input ChangeStatusInput {
  """Whether that status is active"""
  active: Boolean

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """The name of the status, e.g. "pending", "saved", ..."""
  status: String!

  """
  Whether that status should trigger a save of the record described by the change
  """
  triggersSave: Boolean

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `ChangeStatus`. Fields that are set will be updated.
"""
input ChangeStatusPatch {
  """Whether that status is active"""
  active: Boolean

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """The name of the status, e.g. "pending", "saved", ..."""
  status: String

  """
  Whether that status should trigger a save of the record described by the change
  """
  triggersSave: Boolean

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A filter to be used against many `FormChange` object types. All fields are combined with a logical ‘and.’
"""
input ChangeStatusToManyFormChangeFilter {
  """
  Every related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormChangeFilter

  """
  No related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormChangeFilter

  """
  Some related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormChangeFilter
}

"""A connection to a list of `ChangeStatus` values."""
type ChangeStatusesConnection {
  """
  A list of edges which contains the `ChangeStatus` and cursor to aid in pagination.
  """
  edges: [ChangeStatusesEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ChangeStatus` edge in the connection."""
type ChangeStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus
}

"""Methods to use when ordering `ChangeStatus`."""
enum ChangeStatusesOrderBy {
  ACTIVE_ASC
  ACTIVE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STATUS_ASC
  STATUS_DESC
  TRIGGERS_SAVE_ASC
  TRIGGERS_SAVE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table containing information about the application's users """
type CifUser implements Node {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """User's last name"""
  lastName: String

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Unique ID for the user"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  uuid: UUID!
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusCreatedByAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusCreatedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusDeletedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusDeletedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusUpdatedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusUpdatedByAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserCreatedByAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserCreatedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserDeletedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserDeletedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserUpdatedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserUpdatedByAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectCreatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectDeletedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectDeletedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectUpdatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A condition to be used against `CifUser` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CifUserCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID
}

"""
A filter to be used against `CifUser` object types. All fields are combined with a logical ‘and.’
"""
input CifUserFilter {
  """Checks for all expressions in this list."""
  and: [CifUserFilter!]

  """Filter by the object’s `changeStatusesByCreatedBy` relation."""
  changeStatusesByCreatedBy: CifUserToManyChangeStatusFilter

  """Some related `changeStatusesByCreatedBy` exist."""
  changeStatusesByCreatedByExist: Boolean

  """Filter by the object’s `changeStatusesByDeletedBy` relation."""
  changeStatusesByDeletedBy: CifUserToManyChangeStatusFilter

  """Some related `changeStatusesByDeletedBy` exist."""
  changeStatusesByDeletedByExist: Boolean

  """Filter by the object’s `changeStatusesByUpdatedBy` relation."""
  changeStatusesByUpdatedBy: CifUserToManyChangeStatusFilter

  """Some related `changeStatusesByUpdatedBy` exist."""
  changeStatusesByUpdatedByExist: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByDeletedBy` relation."""
  cifUserByDeletedBy: CifUserFilter

  """A related `cifUserByDeletedBy` exists."""
  cifUserByDeletedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `cifUsersByCreatedBy` relation."""
  cifUsersByCreatedBy: CifUserToManyCifUserFilter

  """Some related `cifUsersByCreatedBy` exist."""
  cifUsersByCreatedByExist: Boolean

  """Filter by the object’s `cifUsersByDeletedBy` relation."""
  cifUsersByDeletedBy: CifUserToManyCifUserFilter

  """Some related `cifUsersByDeletedBy` exist."""
  cifUsersByDeletedByExist: Boolean

  """Filter by the object’s `cifUsersByUpdatedBy` relation."""
  cifUsersByUpdatedBy: CifUserToManyCifUserFilter

  """Some related `cifUsersByUpdatedBy` exist."""
  cifUsersByUpdatedByExist: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `emailAddress` field."""
  emailAddress: StringFilter

  """Filter by the object’s `firstName` field."""
  firstName: StringFilter

  """Filter by the object’s `keycloakJwtsBySub` relation."""
  keycloakJwtsBySub: CifUserToManyKeycloakJwtFilter

  """Some related `keycloakJwtsBySub` exist."""
  keycloakJwtsBySubExist: Boolean

  """Filter by the object’s `lastName` field."""
  lastName: StringFilter

  """Negates the expression."""
  not: CifUserFilter

  """Checks for any expressions in this list."""
  or: [CifUserFilter!]

  """Filter by the object’s `projectsByCreatedBy` relation."""
  projectsByCreatedBy: CifUserToManyProjectFilter

  """Some related `projectsByCreatedBy` exist."""
  projectsByCreatedByExist: Boolean

  """Filter by the object’s `projectsByDeletedBy` relation."""
  projectsByDeletedBy: CifUserToManyProjectFilter

  """Some related `projectsByDeletedBy` exist."""
  projectsByDeletedByExist: Boolean

  """Filter by the object’s `projectsByUpdatedBy` relation."""
  projectsByUpdatedBy: CifUserToManyProjectFilter

  """Some related `projectsByUpdatedBy` exist."""
  projectsByUpdatedByExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter
}

"""An input for mutations affecting `CifUser`"""
input CifUserInput {
  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  uuid: UUID!
}

"""
Represents an update to a `CifUser`. Fields that are set will be updated.
"""
input CifUserPatch {
  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  uuid: UUID
}

"""
A filter to be used against many `ChangeStatus` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyChangeStatusFilter {
  """
  Every related `ChangeStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ChangeStatusFilter

  """
  No related `ChangeStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ChangeStatusFilter

  """
  Some related `ChangeStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ChangeStatusFilter
}

"""
A filter to be used against many `CifUser` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyCifUserFilter {
  """
  Every related `CifUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CifUserFilter

  """
  No related `CifUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CifUserFilter

  """
  Some related `CifUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CifUserFilter
}

"""
A filter to be used against many `KeycloakJwt` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyKeycloakJwtFilter {
  """
  Every related `KeycloakJwt` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: KeycloakJwtFilter

  """
  No related `KeycloakJwt` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: KeycloakJwtFilter

  """
  Some related `KeycloakJwt` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: KeycloakJwtFilter
}

"""
A filter to be used against many `Project` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyProjectFilter {
  """
  Every related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectFilter

  """
  No related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectFilter

  """
  Some related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectFilter
}

"""A connection to a list of `CifUser` values."""
type CifUsersConnection {
  """
  A list of edges which contains the `CifUser` and cursor to aid in pagination.
  """
  edges: [CifUsersEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection."""
type CifUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""Methods to use when ordering `CifUser`."""
enum CifUsersOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UUID_ASC
  UUID_DESC
}

"""All input for the create `ChangeStatus` mutation."""
input CreateChangeStatusInput {
  """The `ChangeStatus` to be created by this mutation."""
  changeStatus: ChangeStatusInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `ChangeStatus` mutation."""
type CreateChangeStatusPayload {
  """The `ChangeStatus` that was created by this mutation."""
  changeStatus: ChangeStatus

  """An edge for our `ChangeStatus`. May be used by Relay 1."""
  changeStatusEdge(
    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesEdge

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CifUser` mutation."""
input CreateCifUserInput {
  """The `CifUser` to be created by this mutation."""
  cifUser: CifUserInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CifUser` mutation."""
type CreateCifUserPayload {
  """The `CifUser` that was created by this mutation."""
  cifUser: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """An edge for our `CifUser`. May be used by Relay 1."""
  cifUserEdge(
    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FormChange` mutation."""
input CreateFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormChange` to be created by this mutation."""
  formChange: FormChangeInput!
}

"""The output of our create `FormChange` mutation."""
type CreateFormChangePayload {
  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormChange` that was created by this mutation."""
  formChange: FormChange

  """An edge for our `FormChange`. May be used by Relay 1."""
  formChangeEdge(
    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createUserFromSession` mutation."""
input CreateUserFromSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `createUserFromSession` mutation."""
type CreateUserFromSessionPayload {
  cifUser: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """An edge for our `CifUser`. May be used by Relay 1."""
  cifUserEdge(
    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""All input for the `deleteChangeStatusByStatus` mutation."""
input DeleteChangeStatusByStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the status, e.g. "pending", "saved", ..."""
  status: String!
}

"""All input for the `deleteChangeStatus` mutation."""
input DeleteChangeStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChangeStatus` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ChangeStatus` mutation."""
type DeleteChangeStatusPayload {
  """The `ChangeStatus` that was deleted by this mutation."""
  changeStatus: ChangeStatus

  """An edge for our `ChangeStatus`. May be used by Relay 1."""
  changeStatusEdge(
    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesEdge

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedChangeStatusId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCifUserByRowId` mutation."""
input DeleteCifUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `deleteCifUser` mutation."""
input DeleteCifUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CifUser` to be deleted.
  """
  id: ID!
}

"""The output of our delete `CifUser` mutation."""
type DeleteCifUserPayload {
  """The `CifUser` that was deleted by this mutation."""
  cifUser: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """An edge for our `CifUser`. May be used by Relay 1."""
  cifUserEdge(
    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCifUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFormChangeByRowId` mutation."""
input DeleteFormChangeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""All input for the `deleteFormChange` mutation."""
input DeleteFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormChange` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FormChange` mutation."""
type DeleteFormChangePayload {
  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFormChangeId: ID

  """The `FormChange` that was deleted by this mutation."""
  formChange: FormChange

  """An edge for our `FormChange`. May be used by Relay 1."""
  formChangeEdge(
    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type FormChange implements Node {
  changeReason: String
  changeStatus: String

  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus
  formDataRecordId: Int
  formDataSchemaName: String
  formDataTableName: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  newFormData: JSON
  operation: String
  rowId: Int!
}

"""
A condition to be used against `FormChange` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FormChangeCondition {
  """Checks for equality with the object’s `changeReason` field."""
  changeReason: String

  """Checks for equality with the object’s `changeStatus` field."""
  changeStatus: String

  """Checks for equality with the object’s `formDataRecordId` field."""
  formDataRecordId: Int

  """Checks for equality with the object’s `formDataSchemaName` field."""
  formDataSchemaName: String

  """Checks for equality with the object’s `formDataTableName` field."""
  formDataTableName: String

  """Checks for equality with the object’s `newFormData` field."""
  newFormData: JSON

  """Checks for equality with the object’s `operation` field."""
  operation: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""
A filter to be used against `FormChange` object types. All fields are combined with a logical ‘and.’
"""
input FormChangeFilter {
  """Checks for all expressions in this list."""
  and: [FormChangeFilter!]

  """Filter by the object’s `changeReason` field."""
  changeReason: StringFilter

  """Filter by the object’s `changeStatus` field."""
  changeStatus: StringFilter

  """Filter by the object’s `changeStatusByChangeStatus` relation."""
  changeStatusByChangeStatus: ChangeStatusFilter

  """A related `changeStatusByChangeStatus` exists."""
  changeStatusByChangeStatusExists: Boolean

  """Filter by the object’s `formDataRecordId` field."""
  formDataRecordId: IntFilter

  """Filter by the object’s `formDataSchemaName` field."""
  formDataSchemaName: StringFilter

  """Filter by the object’s `formDataTableName` field."""
  formDataTableName: StringFilter

  """Filter by the object’s `newFormData` field."""
  newFormData: JSONFilter

  """Negates the expression."""
  not: FormChangeFilter

  """Filter by the object’s `operation` field."""
  operation: StringFilter

  """Checks for any expressions in this list."""
  or: [FormChangeFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""An input for mutations affecting `FormChange`"""
input FormChangeInput {
  changeReason: String
  changeStatus: String
  formDataRecordId: Int
  formDataSchemaName: String
  formDataTableName: String
  newFormData: JSON
  operation: String
}

"""
Represents an update to a `FormChange`. Fields that are set will be updated.
"""
input FormChangePatch {
  changeReason: String
  changeStatus: String
  formDataRecordId: Int
  formDataSchemaName: String
  formDataTableName: String
  newFormData: JSON
  operation: String
}

"""A connection to a list of `FormChange` values."""
type FormChangesConnection {
  """
  A list of edges which contains the `FormChange` and cursor to aid in pagination.
  """
  edges: [FormChangesEdge!]!

  """A list of `FormChange` objects."""
  nodes: [FormChange]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormChange` you could get from the connection."""
  totalCount: Int!
}

"""A `FormChange` edge in the connection."""
type FormChangesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormChange` at the end of the edge."""
  node: FormChange
}

"""Methods to use when ordering `FormChange`."""
enum FormChangesOrderBy {
  CHANGE_REASON_ASC
  CHANGE_REASON_DESC
  CHANGE_STATUS_ASC
  CHANGE_STATUS_DESC
  FORM_DATA_RECORD_ID_ASC
  FORM_DATA_RECORD_ID_DESC
  FORM_DATA_SCHEMA_NAME_ASC
  FORM_DATA_SCHEMA_NAME_DESC
  FORM_DATA_TABLE_NAME_ASC
  FORM_DATA_TABLE_NAME_DESC
  ID_ASC
  ID_DESC
  NATURAL
  NEW_FORM_DATA_ASC
  NEW_FORM_DATA_DESC
  OPERATION_ASC
  OPERATION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """Contained by the specified JSON."""
  containedBy: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contains the specified key."""
  containsKey: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value."""
  equalTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Included in the specified list."""
  in: [JSON!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """Not included in the specified list."""
  notIn: [JSON!]
}

type KeycloakJwt {
  acr: String
  aud: String
  authTime: Int
  azp: String
  brokerSessionId: String

  """Reads a single `CifUser` that is related to this `KeycloakJwt`."""
  cifUserBySub: CifUser
  email: String
  emailVerified: Boolean
  exp: Int
  familyName: String
  givenName: String
  iat: Int
  iss: String
  jti: UUID
  name: String
  nbf: Int
  preferredUsername: String
  priorityGroup: String
  sessionState: UUID
  sub: UUID
  typ: String
  userGroups: [String]
}

"""
A filter to be used against `KeycloakJwt` object types. All fields are combined with a logical ‘and.’
"""
input KeycloakJwtFilter {
  """Filter by the object’s `acr` field."""
  acr: StringFilter

  """Checks for all expressions in this list."""
  and: [KeycloakJwtFilter!]

  """Filter by the object’s `aud` field."""
  aud: StringFilter

  """Filter by the object’s `authTime` field."""
  authTime: IntFilter

  """Filter by the object’s `azp` field."""
  azp: StringFilter

  """Filter by the object’s `brokerSessionId` field."""
  brokerSessionId: StringFilter

  """Filter by the object’s `cifUserBySub` relation."""
  cifUserBySub: CifUserFilter

  """A related `cifUserBySub` exists."""
  cifUserBySubExists: Boolean

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `emailVerified` field."""
  emailVerified: BooleanFilter

  """Filter by the object’s `exp` field."""
  exp: IntFilter

  """Filter by the object’s `familyName` field."""
  familyName: StringFilter

  """Filter by the object’s `givenName` field."""
  givenName: StringFilter

  """Filter by the object’s `iat` field."""
  iat: IntFilter

  """Filter by the object’s `iss` field."""
  iss: StringFilter

  """Filter by the object’s `jti` field."""
  jti: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `nbf` field."""
  nbf: IntFilter

  """Negates the expression."""
  not: KeycloakJwtFilter

  """Checks for any expressions in this list."""
  or: [KeycloakJwtFilter!]

  """Filter by the object’s `preferredUsername` field."""
  preferredUsername: StringFilter

  """Filter by the object’s `priorityGroup` field."""
  priorityGroup: StringFilter

  """Filter by the object’s `sessionState` field."""
  sessionState: UUIDFilter

  """Filter by the object’s `sub` field."""
  sub: UUIDFilter

  """Filter by the object’s `typ` field."""
  typ: StringFilter

  """Filter by the object’s `userGroups` field."""
  userGroups: StringListFilter
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `ChangeStatus`."""
  createChangeStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChangeStatusInput!
  ): CreateChangeStatusPayload

  """Creates a single `CifUser`."""
  createCifUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCifUserInput!
  ): CreateCifUserPayload

  """Creates a single `FormChange`."""
  createFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormChangeInput!
  ): CreateFormChangePayload
  createUserFromSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserFromSessionInput!
  ): CreateUserFromSessionPayload

  """Deletes a single `ChangeStatus` using its globally unique id."""
  deleteChangeStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChangeStatusInput!
  ): DeleteChangeStatusPayload

  """Deletes a single `ChangeStatus` using a unique key."""
  deleteChangeStatusByStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChangeStatusByStatusInput!
  ): DeleteChangeStatusPayload

  """Deletes a single `CifUser` using its globally unique id."""
  deleteCifUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCifUserInput!
  ): DeleteCifUserPayload

  """Deletes a single `CifUser` using a unique key."""
  deleteCifUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCifUserByRowIdInput!
  ): DeleteCifUserPayload

  """Deletes a single `FormChange` using its globally unique id."""
  deleteFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormChangeInput!
  ): DeleteFormChangePayload

  """Deletes a single `FormChange` using a unique key."""
  deleteFormChangeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormChangeByRowIdInput!
  ): DeleteFormChangePayload

  """
  Updates a single `ChangeStatus` using its globally unique id and a patch.
  """
  updateChangeStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChangeStatusInput!
  ): UpdateChangeStatusPayload

  """Updates a single `ChangeStatus` using a unique key and a patch."""
  updateChangeStatusByStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChangeStatusByStatusInput!
  ): UpdateChangeStatusPayload

  """Updates a single `CifUser` using its globally unique id and a patch."""
  updateCifUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCifUserInput!
  ): UpdateCifUserPayload

  """Updates a single `CifUser` using a unique key and a patch."""
  updateCifUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCifUserByRowIdInput!
  ): UpdateCifUserPayload

  """
  Updates a single `FormChange` using its globally unique id and a patch.
  """
  updateFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormChangeInput!
  ): UpdateFormChangePayload

  """Updates a single `FormChange` using a unique key and a patch."""
  updateFormChangeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormChangeByRowIdInput!
  ): UpdateFormChangePayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""Table containing information about a CIF Project"""
type Project implements Node {
  """Unique numeric identifier internal to the CIF team"""
  cifIdentifier: Int!

  """Reads a single `CifUser` that is related to this `Project`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Project`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `Project`."""
  cifUserByUpdatedBy: CifUser

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """Description of the project"""
  description: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the project"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `Project` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProjectCondition {
  """Checks for equality with the object’s `cifIdentifier` field."""
  cifIdentifier: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `Project` object types. All fields are combined with a logical ‘and.’
"""
input ProjectFilter {
  """Checks for all expressions in this list."""
  and: [ProjectFilter!]

  """Filter by the object’s `cifIdentifier` field."""
  cifIdentifier: IntFilter

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByDeletedBy` relation."""
  cifUserByDeletedBy: CifUserFilter

  """A related `cifUserByDeletedBy` exists."""
  cifUserByDeletedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Negates the expression."""
  not: ProjectFilter

  """Checks for any expressions in this list."""
  or: [ProjectFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""A connection to a list of `Project` values."""
type ProjectsConnection {
  """
  A list of edges which contains the `Project` and cursor to aid in pagination.
  """
  edges: [ProjectsEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection."""
type ProjectsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project
}

"""Methods to use when ordering `Project`."""
enum ProjectsOrderBy {
  CIF_IDENTIFIER_ASC
  CIF_IDENTIFIER_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  allChangeStatuses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection

  """Reads and enables pagination through a set of `CifUser`."""
  allCifUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection

  """Reads and enables pagination through a set of `FormChange`."""
  allFormChanges(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection

  """Reads and enables pagination through a set of `Project`."""
  allProjects(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection

  """Reads a single `ChangeStatus` using its globally unique `ID`."""
  changeStatus(
    """
    The globally unique `ID` to be used in selecting a single `ChangeStatus`.
    """
    id: ID!
  ): ChangeStatus
  changeStatusByStatus(status: String!): ChangeStatus

  """Reads a single `CifUser` using its globally unique `ID`."""
  cifUser(
    """The globally unique `ID` to be used in selecting a single `CifUser`."""
    id: ID!
  ): CifUser
  cifUserByRowId(rowId: Int!): CifUser

  """Reads a single `FormChange` using its globally unique `ID`."""
  formChange(
    """
    The globally unique `ID` to be used in selecting a single `FormChange`.
    """
    id: ID!
  ): FormChange
  formChangeByRowId(rowId: Int!): FormChange

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads a single `Project` using its globally unique `ID`."""
  project(
    """The globally unique `ID` to be used in selecting a single `Project`."""
    id: ID!
  ): Project
  projectByCifIdentifier(cifIdentifier: Int!): Project
  projectByRowId(rowId: Int!): Project

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  session: KeycloakJwt
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Contained by the specified list of values."""
  containedBy: [String]

  """Contains the specified list of values."""
  contains: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value."""
  equalTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  equalTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}

"""All input for the `updateChangeStatusByStatus` mutation."""
input UpdateChangeStatusByStatusInput {
  """
  An object where the defined keys will be set on the `ChangeStatus` being updated.
  """
  changeStatusPatch: ChangeStatusPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the status, e.g. "pending", "saved", ..."""
  status: String!
}

"""All input for the `updateChangeStatus` mutation."""
input UpdateChangeStatusInput {
  """
  An object where the defined keys will be set on the `ChangeStatus` being updated.
  """
  changeStatusPatch: ChangeStatusPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChangeStatus` to be updated.
  """
  id: ID!
}

"""The output of our update `ChangeStatus` mutation."""
type UpdateChangeStatusPayload {
  """The `ChangeStatus` that was updated by this mutation."""
  changeStatus: ChangeStatus

  """An edge for our `ChangeStatus`. May be used by Relay 1."""
  changeStatusEdge(
    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesEdge

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCifUserByRowId` mutation."""
input UpdateCifUserByRowIdInput {
  """
  An object where the defined keys will be set on the `CifUser` being updated.
  """
  cifUserPatch: CifUserPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `updateCifUser` mutation."""
input UpdateCifUserInput {
  """
  An object where the defined keys will be set on the `CifUser` being updated.
  """
  cifUserPatch: CifUserPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CifUser` to be updated.
  """
  id: ID!
}

"""The output of our update `CifUser` mutation."""
type UpdateCifUserPayload {
  """The `CifUser` that was updated by this mutation."""
  cifUser: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """An edge for our `CifUser`. May be used by Relay 1."""
  cifUserEdge(
    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFormChangeByRowId` mutation."""
input UpdateFormChangeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormChange` being updated.
  """
  formChangePatch: FormChangePatch!
  rowId: Int!
}

"""All input for the `updateFormChange` mutation."""
input UpdateFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormChange` being updated.
  """
  formChangePatch: FormChangePatch!

  """
  The globally unique `ID` which will identify a single `FormChange` to be updated.
  """
  id: ID!
}

"""The output of our update `FormChange` mutation."""
type UpdateFormChangePayload {
  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormChange` that was updated by this mutation."""
  formChange: FormChange

  """An edge for our `FormChange`. May be used by Relay 1."""
  formChangeEdge(
    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}
