"""Table containing information about uploaded attachments"""
type Attachment implements Node {
  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByUpdatedBy: CifUser

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: UUID

  """Original uploaded filename"""
  fileName: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the attachment"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `Attachment` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AttachmentCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `file` field."""
  file: UUID

  """Checks for equality with the object’s `fileName` field."""
  fileName: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `Attachment` object types. All fields are combined with a logical ‘and.’
"""
input AttachmentFilter {
  """Checks for all expressions in this list."""
  and: [AttachmentFilter!]

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByDeletedBy` relation."""
  cifUserByDeletedBy: CifUserFilter

  """A related `cifUserByDeletedBy` exists."""
  cifUserByDeletedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `file` field."""
  file: UUIDFilter

  """Filter by the object’s `fileName` field."""
  fileName: StringFilter

  """Negates the expression."""
  not: AttachmentFilter

  """Checks for any expressions in this list."""
  or: [AttachmentFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `Attachment`"""
input AttachmentInput {
  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: Upload

  """Original uploaded filename"""
  fileName: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `Attachment`. Fields that are set will be updated.
"""
input AttachmentPatch {
  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: Upload

  """Original uploaded filename"""
  fileName: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `Attachment` values."""
type AttachmentsConnection {
  """
  A list of edges which contains the `Attachment` and cursor to aid in pagination.
  """
  edges: [AttachmentsEdge!]!

  """A list of `Attachment` objects."""
  nodes: [Attachment]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Attachment` you could get from the connection."""
  totalCount: Int!
}

"""A `Attachment` edge in the connection."""
type AttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Attachment` at the end of the edge."""
  node: Attachment
}

"""Methods to use when ordering `Attachment`."""
enum AttachmentsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  FILE_ASC
  FILE_DESC
  FILE_NAME_ASC
  FILE_NAME_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

"""Table containing the different status that a change can have"""
type ChangeStatus implements Node {
  """Whether that status is active"""
  active: Boolean

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeChangeStatusAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusCifUsersByFormChangeChangeStatusAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeChangeStatusAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusCifUsersByFormChangeChangeStatusAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeChangeStatusAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusCifUsersByFormChangeChangeStatusAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionChangeStatusAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusCifUsersByProjectRevisionChangeStatusAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionChangeStatusAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusCifUsersByProjectRevisionChangeStatusAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionChangeStatusAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusCifUsersByProjectRevisionChangeStatusAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByFormChangeChangeStatusAndProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusProjectRevisionsByFormChangeChangeStatusAndProjectRevisionIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectRevisionChangeStatusAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusProjectsByProjectRevisionChangeStatusAndProjectIdManyToManyConnection!

  """The name of the status, e.g. "pending", "committed", ..."""
  status: String!

  """
  Whether that status should trigger a commit of the record described by the change
  """
  triggersCommit: Boolean

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type ChangeStatusCifUsersByFormChangeChangeStatusAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusCifUsersByFormChangeChangeStatusAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type ChangeStatusCifUsersByFormChangeChangeStatusAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type ChangeStatusCifUsersByFormChangeChangeStatusAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusCifUsersByFormChangeChangeStatusAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type ChangeStatusCifUsersByFormChangeChangeStatusAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type ChangeStatusCifUsersByFormChangeChangeStatusAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusCifUsersByFormChangeChangeStatusAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type ChangeStatusCifUsersByFormChangeChangeStatusAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type ChangeStatusCifUsersByProjectRevisionChangeStatusAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusCifUsersByProjectRevisionChangeStatusAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type ChangeStatusCifUsersByProjectRevisionChangeStatusAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type ChangeStatusCifUsersByProjectRevisionChangeStatusAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusCifUsersByProjectRevisionChangeStatusAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type ChangeStatusCifUsersByProjectRevisionChangeStatusAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type ChangeStatusCifUsersByProjectRevisionChangeStatusAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusCifUsersByProjectRevisionChangeStatusAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type ChangeStatusCifUsersByProjectRevisionChangeStatusAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A condition to be used against `ChangeStatus` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ChangeStatusCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `triggersCommit` field."""
  triggersCommit: Boolean

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ChangeStatus` object types. All fields are combined with a logical ‘and.’
"""
input ChangeStatusFilter {
  """Filter by the object’s `active` field."""
  active: BooleanFilter

  """Checks for all expressions in this list."""
  and: [ChangeStatusFilter!]

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByDeletedBy` relation."""
  cifUserByDeletedBy: CifUserFilter

  """A related `cifUserByDeletedBy` exists."""
  cifUserByDeletedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `formChangesByChangeStatus` relation."""
  formChangesByChangeStatus: ChangeStatusToManyFormChangeFilter

  """Some related `formChangesByChangeStatus` exist."""
  formChangesByChangeStatusExist: Boolean

  """Negates the expression."""
  not: ChangeStatusFilter

  """Checks for any expressions in this list."""
  or: [ChangeStatusFilter!]

  """Filter by the object’s `projectRevisionsByChangeStatus` relation."""
  projectRevisionsByChangeStatus: ChangeStatusToManyProjectRevisionFilter

  """Some related `projectRevisionsByChangeStatus` exist."""
  projectRevisionsByChangeStatusExist: Boolean

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `triggersCommit` field."""
  triggersCommit: BooleanFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `ChangeStatus`"""
input ChangeStatusInput {
  """Whether that status is active"""
  active: Boolean

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """The name of the status, e.g. "pending", "committed", ..."""
  status: String!

  """
  Whether that status should trigger a commit of the record described by the change
  """
  triggersCommit: Boolean

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `ChangeStatus`. Fields that are set will be updated.
"""
input ChangeStatusPatch {
  """Whether that status is active"""
  active: Boolean

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """The name of the status, e.g. "pending", "committed", ..."""
  status: String

  """
  Whether that status should trigger a commit of the record described by the change
  """
  triggersCommit: Boolean

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `ProjectRevision` values, with data from `FormChange`.
"""
type ChangeStatusProjectRevisionsByFormChangeChangeStatusAndProjectRevisionIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectRevision`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusProjectRevisionsByFormChangeChangeStatusAndProjectRevisionIdManyToManyEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectRevision` edge in the connection, with data from `FormChange`.
"""
type ChangeStatusProjectRevisionsByFormChangeChangeStatusAndProjectRevisionIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision
}

"""
A connection to a list of `Project` values, with data from `ProjectRevision`.
"""
type ChangeStatusProjectsByProjectRevisionChangeStatusAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusProjectsByProjectRevisionChangeStatusAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectRevision`."""
type ChangeStatusProjectsByProjectRevisionChangeStatusAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A filter to be used against many `FormChange` object types. All fields are combined with a logical ‘and.’
"""
input ChangeStatusToManyFormChangeFilter {
  """
  Every related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormChangeFilter

  """
  No related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormChangeFilter

  """
  Some related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormChangeFilter
}

"""
A filter to be used against many `ProjectRevision` object types. All fields are combined with a logical ‘and.’
"""
input ChangeStatusToManyProjectRevisionFilter {
  """
  Every related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectRevisionFilter

  """
  No related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectRevisionFilter

  """
  Some related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectRevisionFilter
}

"""A connection to a list of `ChangeStatus` values."""
type ChangeStatusesConnection {
  """
  A list of edges which contains the `ChangeStatus` and cursor to aid in pagination.
  """
  edges: [ChangeStatusesEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ChangeStatus` edge in the connection."""
type ChangeStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus
}

"""Methods to use when ordering `ChangeStatus`."""
enum ChangeStatusesOrderBy {
  ACTIVE_ASC
  ACTIVE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STATUS_ASC
  STATUS_DESC
  TRIGGERS_COMMIT_ASC
  TRIGGERS_COMMIT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table containing information about the application's users """
type CifUser implements Node {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByFormChangeCreatedByAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserChangeStatusesByFormChangeCreatedByAndChangeStatusManyToManyConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByFormChangeDeletedByAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserChangeStatusesByFormChangeDeletedByAndChangeStatusManyToManyConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByFormChangeUpdatedByAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserChangeStatusesByFormChangeUpdatedByAndChangeStatusManyToManyConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByProjectRevisionCreatedByAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserChangeStatusesByProjectRevisionCreatedByAndChangeStatusManyToManyConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByProjectRevisionDeletedByAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserChangeStatusesByProjectRevisionDeletedByAndChangeStatusManyToManyConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByProjectRevisionUpdatedByAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserChangeStatusesByProjectRevisionUpdatedByAndChangeStatusManyToManyConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAttachmentCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAttachmentCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAttachmentDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAttachmentDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAttachmentUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAttachmentUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFormChangeCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFormChangeCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFormChangeDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFormChangeDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFormChangeUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFormChangeUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByOperatorCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByOperatorCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByOperatorCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByOperatorCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByOperatorDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByOperatorDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByOperatorDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByOperatorDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByOperatorUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByOperatorUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByOperatorUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByOperatorUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerCifUserIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerCifUserIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerCifUserIdAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerCifUserIdAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerCifUserIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerCifUserIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerCreatedByAndCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerCreatedByAndCifUserIdManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerDeletedByAndCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerDeletedByAndCifUserIdManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerUpdatedByAndCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerUpdatedByAndCifUserIdManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectRevisionCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectRevisionCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectRevisionDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectRevisionDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectRevisionUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectRevisionUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByProjectCreatedByAndFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamsByProjectCreatedByAndFundingStreamIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByProjectDeletedByAndFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamsByProjectDeletedByAndFundingStreamIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByProjectUpdatedByAndFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamsByProjectUpdatedByAndFundingStreamIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """User's last name"""
  lastName: String

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByProjectCreatedByAndOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserOperatorsByProjectCreatedByAndOperatorIdManyToManyConnection!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByProjectDeletedByAndOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserOperatorsByProjectDeletedByAndOperatorIdManyToManyConnection!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByProjectUpdatedByAndOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserOperatorsByProjectUpdatedByAndOperatorIdManyToManyConnection!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByFormChangeCreatedByAndProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectRevisionsByFormChangeCreatedByAndProjectRevisionIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByFormChangeDeletedByAndProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectRevisionsByFormChangeDeletedByAndProjectRevisionIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByFormChangeUpdatedByAndProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectRevisionsByFormChangeUpdatedByAndProjectRevisionIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectManagerCifUserIdAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectManagerCifUserIdAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectManagerCreatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectManagerCreatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectManagerDeletedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectManagerDeletedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectManagerUpdatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectManagerUpdatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectRevisionCreatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectRevisionCreatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectRevisionDeletedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectRevisionDeletedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectRevisionUpdatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectRevisionUpdatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Unique ID for the user"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  uuid: UUID!
}

"""
A connection to a list of `ChangeStatus` values, with data from `FormChange`.
"""
type CifUserChangeStatusesByFormChangeCreatedByAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserChangeStatusesByFormChangeCreatedByAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ChangeStatus` edge in the connection, with data from `FormChange`."""
type CifUserChangeStatusesByFormChangeCreatedByAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus
}

"""
A connection to a list of `ChangeStatus` values, with data from `FormChange`.
"""
type CifUserChangeStatusesByFormChangeDeletedByAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserChangeStatusesByFormChangeDeletedByAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ChangeStatus` edge in the connection, with data from `FormChange`."""
type CifUserChangeStatusesByFormChangeDeletedByAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus
}

"""
A connection to a list of `ChangeStatus` values, with data from `FormChange`.
"""
type CifUserChangeStatusesByFormChangeUpdatedByAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserChangeStatusesByFormChangeUpdatedByAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ChangeStatus` edge in the connection, with data from `FormChange`."""
type CifUserChangeStatusesByFormChangeUpdatedByAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus
}

"""
A connection to a list of `ChangeStatus` values, with data from `ProjectRevision`.
"""
type CifUserChangeStatusesByProjectRevisionCreatedByAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserChangeStatusesByProjectRevisionCreatedByAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ChangeStatus` edge in the connection, with data from `ProjectRevision`.
"""
type CifUserChangeStatusesByProjectRevisionCreatedByAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `ChangeStatus` values, with data from `ProjectRevision`.
"""
type CifUserChangeStatusesByProjectRevisionDeletedByAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserChangeStatusesByProjectRevisionDeletedByAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ChangeStatus` edge in the connection, with data from `ProjectRevision`.
"""
type CifUserChangeStatusesByProjectRevisionDeletedByAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `ChangeStatus` values, with data from `ProjectRevision`.
"""
type CifUserChangeStatusesByProjectRevisionUpdatedByAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserChangeStatusesByProjectRevisionUpdatedByAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ChangeStatus` edge in the connection, with data from `ProjectRevision`.
"""
type CifUserChangeStatusesByProjectRevisionUpdatedByAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type CifUserCifUsersByAttachmentCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAttachmentCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type CifUserCifUsersByAttachmentCreatedByAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type CifUserCifUsersByAttachmentCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAttachmentCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type CifUserCifUsersByAttachmentCreatedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type CifUserCifUsersByAttachmentDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAttachmentDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type CifUserCifUsersByAttachmentDeletedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type CifUserCifUsersByAttachmentDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAttachmentDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type CifUserCifUsersByAttachmentDeletedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type CifUserCifUsersByAttachmentUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAttachmentUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type CifUserCifUsersByAttachmentUpdatedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type CifUserCifUsersByAttachmentUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAttachmentUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type CifUserCifUsersByAttachmentUpdatedByAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusCreatedByAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusCreatedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusDeletedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusDeletedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusUpdatedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusUpdatedByAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserCreatedByAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserCreatedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserDeletedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserDeletedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserUpdatedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserUpdatedByAndDeletedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type CifUserCifUsersByFormChangeCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFormChangeCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type CifUserCifUsersByFormChangeCreatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type CifUserCifUsersByFormChangeCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFormChangeCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type CifUserCifUsersByFormChangeCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type CifUserCifUsersByFormChangeDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFormChangeDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type CifUserCifUsersByFormChangeDeletedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type CifUserCifUsersByFormChangeDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFormChangeDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type CifUserCifUsersByFormChangeDeletedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type CifUserCifUsersByFormChangeUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFormChangeUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type CifUserCifUsersByFormChangeUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type CifUserCifUsersByFormChangeUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFormChangeUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type CifUserCifUsersByFormChangeUpdatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStream`.
"""
type CifUserCifUsersByFundingStreamCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStream`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStream`."""
type CifUserCifUsersByFundingStreamCreatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStream`.
"""
type CifUserCifUsersByFundingStreamCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStream`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStream`."""
type CifUserCifUsersByFundingStreamCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStream`.
"""
type CifUserCifUsersByFundingStreamDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStream`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStream`."""
type CifUserCifUsersByFundingStreamDeletedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStream`.
"""
type CifUserCifUsersByFundingStreamDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStream`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStream`."""
type CifUserCifUsersByFundingStreamDeletedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStream`.
"""
type CifUserCifUsersByFundingStreamUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStream`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStream`."""
type CifUserCifUsersByFundingStreamUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStream`.
"""
type CifUserCifUsersByFundingStreamUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStream`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStream`."""
type CifUserCifUsersByFundingStreamUpdatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Operator`."""
type CifUserCifUsersByOperatorCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Operator`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByOperatorCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Operator`."""
type CifUserCifUsersByOperatorCreatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Operator`."""
type CifUserCifUsersByOperatorCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Operator`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByOperatorCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Operator`."""
type CifUserCifUsersByOperatorCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Operator`."""
type CifUserCifUsersByOperatorDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Operator`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByOperatorDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Operator`."""
type CifUserCifUsersByOperatorDeletedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Operator`."""
type CifUserCifUsersByOperatorDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Operator`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByOperatorDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Operator`."""
type CifUserCifUsersByOperatorDeletedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Operator`."""
type CifUserCifUsersByOperatorUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Operator`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByOperatorUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Operator`."""
type CifUserCifUsersByOperatorUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Operator`."""
type CifUserCifUsersByOperatorUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Operator`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByOperatorUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Operator`."""
type CifUserCifUsersByOperatorUpdatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectCreatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectDeletedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectDeletedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerCifUserIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerCifUserIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerCifUserIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerCifUserIdAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerCifUserIdAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerCifUserIdAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerCifUserIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerCifUserIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerCifUserIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerCreatedByAndCifUserIdManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerCreatedByAndCifUserIdManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerCreatedByAndCifUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerCreatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerDeletedByAndCifUserIdManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerDeletedByAndCifUserIdManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerDeletedByAndCifUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerDeletedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerDeletedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerUpdatedByAndCifUserIdManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerUpdatedByAndCifUserIdManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerUpdatedByAndCifUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerUpdatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type CifUserCifUsersByProjectRevisionCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectRevisionCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type CifUserCifUsersByProjectRevisionCreatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type CifUserCifUsersByProjectRevisionCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectRevisionCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type CifUserCifUsersByProjectRevisionCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type CifUserCifUsersByProjectRevisionDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectRevisionDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type CifUserCifUsersByProjectRevisionDeletedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type CifUserCifUsersByProjectRevisionDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectRevisionDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type CifUserCifUsersByProjectRevisionDeletedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type CifUserCifUsersByProjectRevisionUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectRevisionUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type CifUserCifUsersByProjectRevisionUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type CifUserCifUsersByProjectRevisionUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectRevisionUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type CifUserCifUsersByProjectRevisionUpdatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectUpdatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A condition to be used against `CifUser` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CifUserCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID
}

"""
A filter to be used against `CifUser` object types. All fields are combined with a logical ‘and.’
"""
input CifUserFilter {
  """Checks for all expressions in this list."""
  and: [CifUserFilter!]

  """Filter by the object’s `attachmentsByCreatedBy` relation."""
  attachmentsByCreatedBy: CifUserToManyAttachmentFilter

  """Some related `attachmentsByCreatedBy` exist."""
  attachmentsByCreatedByExist: Boolean

  """Filter by the object’s `attachmentsByDeletedBy` relation."""
  attachmentsByDeletedBy: CifUserToManyAttachmentFilter

  """Some related `attachmentsByDeletedBy` exist."""
  attachmentsByDeletedByExist: Boolean

  """Filter by the object’s `attachmentsByUpdatedBy` relation."""
  attachmentsByUpdatedBy: CifUserToManyAttachmentFilter

  """Some related `attachmentsByUpdatedBy` exist."""
  attachmentsByUpdatedByExist: Boolean

  """Filter by the object’s `changeStatusesByCreatedBy` relation."""
  changeStatusesByCreatedBy: CifUserToManyChangeStatusFilter

  """Some related `changeStatusesByCreatedBy` exist."""
  changeStatusesByCreatedByExist: Boolean

  """Filter by the object’s `changeStatusesByDeletedBy` relation."""
  changeStatusesByDeletedBy: CifUserToManyChangeStatusFilter

  """Some related `changeStatusesByDeletedBy` exist."""
  changeStatusesByDeletedByExist: Boolean

  """Filter by the object’s `changeStatusesByUpdatedBy` relation."""
  changeStatusesByUpdatedBy: CifUserToManyChangeStatusFilter

  """Some related `changeStatusesByUpdatedBy` exist."""
  changeStatusesByUpdatedByExist: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByDeletedBy` relation."""
  cifUserByDeletedBy: CifUserFilter

  """A related `cifUserByDeletedBy` exists."""
  cifUserByDeletedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `cifUsersByCreatedBy` relation."""
  cifUsersByCreatedBy: CifUserToManyCifUserFilter

  """Some related `cifUsersByCreatedBy` exist."""
  cifUsersByCreatedByExist: Boolean

  """Filter by the object’s `cifUsersByDeletedBy` relation."""
  cifUsersByDeletedBy: CifUserToManyCifUserFilter

  """Some related `cifUsersByDeletedBy` exist."""
  cifUsersByDeletedByExist: Boolean

  """Filter by the object’s `cifUsersByUpdatedBy` relation."""
  cifUsersByUpdatedBy: CifUserToManyCifUserFilter

  """Some related `cifUsersByUpdatedBy` exist."""
  cifUsersByUpdatedByExist: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `emailAddress` field."""
  emailAddress: StringFilter

  """Filter by the object’s `firstName` field."""
  firstName: StringFilter

  """Filter by the object’s `formChangesByCreatedBy` relation."""
  formChangesByCreatedBy: CifUserToManyFormChangeFilter

  """Some related `formChangesByCreatedBy` exist."""
  formChangesByCreatedByExist: Boolean

  """Filter by the object’s `formChangesByDeletedBy` relation."""
  formChangesByDeletedBy: CifUserToManyFormChangeFilter

  """Some related `formChangesByDeletedBy` exist."""
  formChangesByDeletedByExist: Boolean

  """Filter by the object’s `formChangesByUpdatedBy` relation."""
  formChangesByUpdatedBy: CifUserToManyFormChangeFilter

  """Some related `formChangesByUpdatedBy` exist."""
  formChangesByUpdatedByExist: Boolean

  """Filter by the object’s `fundingStreamsByCreatedBy` relation."""
  fundingStreamsByCreatedBy: CifUserToManyFundingStreamFilter

  """Some related `fundingStreamsByCreatedBy` exist."""
  fundingStreamsByCreatedByExist: Boolean

  """Filter by the object’s `fundingStreamsByDeletedBy` relation."""
  fundingStreamsByDeletedBy: CifUserToManyFundingStreamFilter

  """Some related `fundingStreamsByDeletedBy` exist."""
  fundingStreamsByDeletedByExist: Boolean

  """Filter by the object’s `fundingStreamsByUpdatedBy` relation."""
  fundingStreamsByUpdatedBy: CifUserToManyFundingStreamFilter

  """Some related `fundingStreamsByUpdatedBy` exist."""
  fundingStreamsByUpdatedByExist: Boolean

  """Filter by the object’s `keycloakJwtsBySub` relation."""
  keycloakJwtsBySub: CifUserToManyKeycloakJwtFilter

  """Some related `keycloakJwtsBySub` exist."""
  keycloakJwtsBySubExist: Boolean

  """Filter by the object’s `lastName` field."""
  lastName: StringFilter

  """Negates the expression."""
  not: CifUserFilter

  """Filter by the object’s `operatorsByCreatedBy` relation."""
  operatorsByCreatedBy: CifUserToManyOperatorFilter

  """Some related `operatorsByCreatedBy` exist."""
  operatorsByCreatedByExist: Boolean

  """Filter by the object’s `operatorsByDeletedBy` relation."""
  operatorsByDeletedBy: CifUserToManyOperatorFilter

  """Some related `operatorsByDeletedBy` exist."""
  operatorsByDeletedByExist: Boolean

  """Filter by the object’s `operatorsByUpdatedBy` relation."""
  operatorsByUpdatedBy: CifUserToManyOperatorFilter

  """Some related `operatorsByUpdatedBy` exist."""
  operatorsByUpdatedByExist: Boolean

  """Checks for any expressions in this list."""
  or: [CifUserFilter!]

  """Filter by the object’s `projectManagersByCifUserId` relation."""
  projectManagersByCifUserId: CifUserToManyProjectManagerFilter

  """Some related `projectManagersByCifUserId` exist."""
  projectManagersByCifUserIdExist: Boolean

  """Filter by the object’s `projectManagersByCreatedBy` relation."""
  projectManagersByCreatedBy: CifUserToManyProjectManagerFilter

  """Some related `projectManagersByCreatedBy` exist."""
  projectManagersByCreatedByExist: Boolean

  """Filter by the object’s `projectManagersByDeletedBy` relation."""
  projectManagersByDeletedBy: CifUserToManyProjectManagerFilter

  """Some related `projectManagersByDeletedBy` exist."""
  projectManagersByDeletedByExist: Boolean

  """Filter by the object’s `projectManagersByUpdatedBy` relation."""
  projectManagersByUpdatedBy: CifUserToManyProjectManagerFilter

  """Some related `projectManagersByUpdatedBy` exist."""
  projectManagersByUpdatedByExist: Boolean

  """Filter by the object’s `projectRevisionsByCreatedBy` relation."""
  projectRevisionsByCreatedBy: CifUserToManyProjectRevisionFilter

  """Some related `projectRevisionsByCreatedBy` exist."""
  projectRevisionsByCreatedByExist: Boolean

  """Filter by the object’s `projectRevisionsByDeletedBy` relation."""
  projectRevisionsByDeletedBy: CifUserToManyProjectRevisionFilter

  """Some related `projectRevisionsByDeletedBy` exist."""
  projectRevisionsByDeletedByExist: Boolean

  """Filter by the object’s `projectRevisionsByUpdatedBy` relation."""
  projectRevisionsByUpdatedBy: CifUserToManyProjectRevisionFilter

  """Some related `projectRevisionsByUpdatedBy` exist."""
  projectRevisionsByUpdatedByExist: Boolean

  """Filter by the object’s `projectsByCreatedBy` relation."""
  projectsByCreatedBy: CifUserToManyProjectFilter

  """Some related `projectsByCreatedBy` exist."""
  projectsByCreatedByExist: Boolean

  """Filter by the object’s `projectsByDeletedBy` relation."""
  projectsByDeletedBy: CifUserToManyProjectFilter

  """Some related `projectsByDeletedBy` exist."""
  projectsByDeletedByExist: Boolean

  """Filter by the object’s `projectsByUpdatedBy` relation."""
  projectsByUpdatedBy: CifUserToManyProjectFilter

  """Some related `projectsByUpdatedBy` exist."""
  projectsByUpdatedByExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter
}

"""
A connection to a list of `FundingStream` values, with data from `Project`.
"""
type CifUserFundingStreamsByProjectCreatedByAndFundingStreamIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStream`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamsByProjectCreatedByAndFundingStreamIdManyToManyEdge!]!

  """A list of `FundingStream` objects."""
  nodes: [FundingStream]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FundingStream` you could get from the connection."""
  totalCount: Int!
}

"""A `FundingStream` edge in the connection, with data from `Project`."""
type CifUserFundingStreamsByProjectCreatedByAndFundingStreamIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStream` at the end of the edge."""
  node: FundingStream

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `FundingStream` values, with data from `Project`.
"""
type CifUserFundingStreamsByProjectDeletedByAndFundingStreamIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStream`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamsByProjectDeletedByAndFundingStreamIdManyToManyEdge!]!

  """A list of `FundingStream` objects."""
  nodes: [FundingStream]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FundingStream` you could get from the connection."""
  totalCount: Int!
}

"""A `FundingStream` edge in the connection, with data from `Project`."""
type CifUserFundingStreamsByProjectDeletedByAndFundingStreamIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStream` at the end of the edge."""
  node: FundingStream

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `FundingStream` values, with data from `Project`.
"""
type CifUserFundingStreamsByProjectUpdatedByAndFundingStreamIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStream`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamsByProjectUpdatedByAndFundingStreamIdManyToManyEdge!]!

  """A list of `FundingStream` objects."""
  nodes: [FundingStream]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FundingStream` you could get from the connection."""
  totalCount: Int!
}

"""A `FundingStream` edge in the connection, with data from `Project`."""
type CifUserFundingStreamsByProjectUpdatedByAndFundingStreamIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStream` at the end of the edge."""
  node: FundingStream

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""An input for mutations affecting `CifUser`"""
input CifUserInput {
  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  uuid: UUID!
}

"""A connection to a list of `Operator` values, with data from `Project`."""
type CifUserOperatorsByProjectCreatedByAndOperatorIdManyToManyConnection {
  """
  A list of edges which contains the `Operator`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserOperatorsByProjectCreatedByAndOperatorIdManyToManyEdge!]!

  """A list of `Operator` objects."""
  nodes: [Operator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operator` you could get from the connection."""
  totalCount: Int!
}

"""A `Operator` edge in the connection, with data from `Project`."""
type CifUserOperatorsByProjectCreatedByAndOperatorIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operator` at the end of the edge."""
  node: Operator

  """Reads and enables pagination through a set of `Project`."""
  projectsByOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `Operator` values, with data from `Project`."""
type CifUserOperatorsByProjectDeletedByAndOperatorIdManyToManyConnection {
  """
  A list of edges which contains the `Operator`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserOperatorsByProjectDeletedByAndOperatorIdManyToManyEdge!]!

  """A list of `Operator` objects."""
  nodes: [Operator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operator` you could get from the connection."""
  totalCount: Int!
}

"""A `Operator` edge in the connection, with data from `Project`."""
type CifUserOperatorsByProjectDeletedByAndOperatorIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operator` at the end of the edge."""
  node: Operator

  """Reads and enables pagination through a set of `Project`."""
  projectsByOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `Operator` values, with data from `Project`."""
type CifUserOperatorsByProjectUpdatedByAndOperatorIdManyToManyConnection {
  """
  A list of edges which contains the `Operator`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserOperatorsByProjectUpdatedByAndOperatorIdManyToManyEdge!]!

  """A list of `Operator` objects."""
  nodes: [Operator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operator` you could get from the connection."""
  totalCount: Int!
}

"""A `Operator` edge in the connection, with data from `Project`."""
type CifUserOperatorsByProjectUpdatedByAndOperatorIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operator` at the end of the edge."""
  node: Operator

  """Reads and enables pagination through a set of `Project`."""
  projectsByOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
Represents an update to a `CifUser`. Fields that are set will be updated.
"""
input CifUserPatch {
  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  uuid: UUID
}

"""
A connection to a list of `ProjectRevision` values, with data from `FormChange`.
"""
type CifUserProjectRevisionsByFormChangeCreatedByAndProjectRevisionIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectRevision`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectRevisionsByFormChangeCreatedByAndProjectRevisionIdManyToManyEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectRevision` edge in the connection, with data from `FormChange`.
"""
type CifUserProjectRevisionsByFormChangeCreatedByAndProjectRevisionIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision
}

"""
A connection to a list of `ProjectRevision` values, with data from `FormChange`.
"""
type CifUserProjectRevisionsByFormChangeDeletedByAndProjectRevisionIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectRevision`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectRevisionsByFormChangeDeletedByAndProjectRevisionIdManyToManyEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectRevision` edge in the connection, with data from `FormChange`.
"""
type CifUserProjectRevisionsByFormChangeDeletedByAndProjectRevisionIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision
}

"""
A connection to a list of `ProjectRevision` values, with data from `FormChange`.
"""
type CifUserProjectRevisionsByFormChangeUpdatedByAndProjectRevisionIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectRevision`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectRevisionsByFormChangeUpdatedByAndProjectRevisionIdManyToManyEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectRevision` edge in the connection, with data from `FormChange`.
"""
type CifUserProjectRevisionsByFormChangeUpdatedByAndProjectRevisionIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision
}

"""
A connection to a list of `Project` values, with data from `ProjectManager`.
"""
type CifUserProjectsByProjectManagerCifUserIdAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectManagerCifUserIdAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectManager`."""
type CifUserProjectsByProjectManagerCifUserIdAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectManager`.
"""
type CifUserProjectsByProjectManagerCreatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectManagerCreatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectManager`."""
type CifUserProjectsByProjectManagerCreatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectManager`.
"""
type CifUserProjectsByProjectManagerDeletedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectManagerDeletedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectManager`."""
type CifUserProjectsByProjectManagerDeletedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectManager`.
"""
type CifUserProjectsByProjectManagerUpdatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectManagerUpdatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectManager`."""
type CifUserProjectsByProjectManagerUpdatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectRevision`.
"""
type CifUserProjectsByProjectRevisionCreatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectRevisionCreatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectRevision`."""
type CifUserProjectsByProjectRevisionCreatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectRevision`.
"""
type CifUserProjectsByProjectRevisionDeletedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectRevisionDeletedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectRevision`."""
type CifUserProjectsByProjectRevisionDeletedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectRevision`.
"""
type CifUserProjectsByProjectRevisionUpdatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectRevisionUpdatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectRevision`."""
type CifUserProjectsByProjectRevisionUpdatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A filter to be used against many `Attachment` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyAttachmentFilter {
  """
  Every related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AttachmentFilter

  """
  No related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AttachmentFilter

  """
  Some related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AttachmentFilter
}

"""
A filter to be used against many `ChangeStatus` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyChangeStatusFilter {
  """
  Every related `ChangeStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ChangeStatusFilter

  """
  No related `ChangeStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ChangeStatusFilter

  """
  Some related `ChangeStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ChangeStatusFilter
}

"""
A filter to be used against many `CifUser` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyCifUserFilter {
  """
  Every related `CifUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CifUserFilter

  """
  No related `CifUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CifUserFilter

  """
  Some related `CifUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CifUserFilter
}

"""
A filter to be used against many `FormChange` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyFormChangeFilter {
  """
  Every related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormChangeFilter

  """
  No related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormChangeFilter

  """
  Some related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormChangeFilter
}

"""
A filter to be used against many `FundingStream` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyFundingStreamFilter {
  """
  Every related `FundingStream` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FundingStreamFilter

  """
  No related `FundingStream` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FundingStreamFilter

  """
  Some related `FundingStream` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FundingStreamFilter
}

"""
A filter to be used against many `KeycloakJwt` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyKeycloakJwtFilter {
  """
  Every related `KeycloakJwt` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: KeycloakJwtFilter

  """
  No related `KeycloakJwt` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: KeycloakJwtFilter

  """
  Some related `KeycloakJwt` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: KeycloakJwtFilter
}

"""
A filter to be used against many `Operator` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyOperatorFilter {
  """
  Every related `Operator` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OperatorFilter

  """
  No related `Operator` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OperatorFilter

  """
  Some related `Operator` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OperatorFilter
}

"""
A filter to be used against many `Project` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyProjectFilter {
  """
  Every related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectFilter

  """
  No related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectFilter

  """
  Some related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectFilter
}

"""
A filter to be used against many `ProjectManager` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyProjectManagerFilter {
  """
  Every related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectManagerFilter

  """
  No related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectManagerFilter

  """
  Some related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectManagerFilter
}

"""
A filter to be used against many `ProjectRevision` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyProjectRevisionFilter {
  """
  Every related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectRevisionFilter

  """
  No related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectRevisionFilter

  """
  Some related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectRevisionFilter
}

"""A connection to a list of `CifUser` values."""
type CifUsersConnection {
  """
  A list of edges which contains the `CifUser` and cursor to aid in pagination.
  """
  edges: [CifUsersEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection."""
type CifUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""Methods to use when ordering `CifUser`."""
enum CifUsersOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UUID_ASC
  UUID_DESC
}

"""All input for the create `Attachment` mutation."""
input CreateAttachmentInput {
  """The `Attachment` to be created by this mutation."""
  attachment: AttachmentInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Attachment` mutation."""
type CreateAttachmentPayload {
  """The `Attachment` that was created by this mutation."""
  attachment: Attachment

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ChangeStatus` mutation."""
input CreateChangeStatusInput {
  """The `ChangeStatus` to be created by this mutation."""
  changeStatus: ChangeStatusInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `ChangeStatus` mutation."""
type CreateChangeStatusPayload {
  """The `ChangeStatus` that was created by this mutation."""
  changeStatus: ChangeStatus

  """An edge for our `ChangeStatus`. May be used by Relay 1."""
  changeStatusEdge(
    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesEdge

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CifUser` mutation."""
input CreateCifUserInput {
  """The `CifUser` to be created by this mutation."""
  cifUser: CifUserInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CifUser` mutation."""
type CreateCifUserPayload {
  """The `CifUser` that was created by this mutation."""
  cifUser: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """An edge for our `CifUser`. May be used by Relay 1."""
  cifUserEdge(
    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FormChange` mutation."""
input CreateFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormChange` to be created by this mutation."""
  formChange: FormChangeInput!
}

"""The output of our create `FormChange` mutation."""
type CreateFormChangePayload {
  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormChange` that was created by this mutation."""
  formChange: FormChange

  """An edge for our `FormChange`. May be used by Relay 1."""
  formChangeEdge(
    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge

  """Reads a single `ProjectRevision` that is related to this `FormChange`."""
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FundingStream` mutation."""
input CreateFundingStreamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FundingStream` to be created by this mutation."""
  fundingStream: FundingStreamInput!
}

"""The output of our create `FundingStream` mutation."""
type CreateFundingStreamPayload {
  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FundingStream` that was created by this mutation."""
  fundingStream: FundingStream

  """An edge for our `FundingStream`. May be used by Relay 1."""
  fundingStreamEdge(
    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createProject` mutation."""
input CreateProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""All input for the create `ProjectManager` mutation."""
input CreateProjectManagerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectManager` to be created by this mutation."""
  projectManager: ProjectManagerInput!
}

"""The output of our create `ProjectManager` mutation."""
type CreateProjectManagerPayload {
  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCifUserId: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `ProjectManager`."""
  projectByProjectId: Project

  """The `ProjectManager` that was created by this mutation."""
  projectManager: ProjectManager

  """An edge for our `ProjectManager`. May be used by Relay 1."""
  projectManagerEdge(
    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our `createProject` mutation."""
type CreateProjectPayload {
  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `ProjectRevision`."""
  projectByProjectId: Project
  projectRevision: ProjectRevision

  """An edge for our `ProjectRevision`. May be used by Relay 1."""
  projectRevisionEdge(
    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ProjectRevision` mutation."""
input CreateProjectRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectRevision` to be created by this mutation."""
  projectRevision: ProjectRevisionInput!
}

"""The output of our create `ProjectRevision` mutation."""
type CreateProjectRevisionPayload {
  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `ProjectRevision`."""
  projectByProjectId: Project

  """The `ProjectRevision` that was created by this mutation."""
  projectRevision: ProjectRevision

  """An edge for our `ProjectRevision`. May be used by Relay 1."""
  projectRevisionEdge(
    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createUserFromSession` mutation."""
input CreateUserFromSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `createUserFromSession` mutation."""
type CreateUserFromSessionPayload {
  cifUser: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """An edge for our `CifUser`. May be used by Relay 1."""
  cifUserEdge(
    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""All input for the `deleteAttachmentByRowId` mutation."""
input DeleteAttachmentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the attachment"""
  rowId: Int!
}

"""All input for the `deleteAttachment` mutation."""
input DeleteAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Attachment` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Attachment` mutation."""
type DeleteAttachmentPayload {
  """The `Attachment` that was deleted by this mutation."""
  attachment: Attachment

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAttachmentId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteChangeStatusByStatus` mutation."""
input DeleteChangeStatusByStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the status, e.g. "pending", "committed", ..."""
  status: String!
}

"""All input for the `deleteChangeStatus` mutation."""
input DeleteChangeStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChangeStatus` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ChangeStatus` mutation."""
type DeleteChangeStatusPayload {
  """The `ChangeStatus` that was deleted by this mutation."""
  changeStatus: ChangeStatus

  """An edge for our `ChangeStatus`. May be used by Relay 1."""
  changeStatusEdge(
    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesEdge

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedChangeStatusId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCifUserByRowId` mutation."""
input DeleteCifUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `deleteCifUser` mutation."""
input DeleteCifUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CifUser` to be deleted.
  """
  id: ID!
}

"""The output of our delete `CifUser` mutation."""
type DeleteCifUserPayload {
  """The `CifUser` that was deleted by this mutation."""
  cifUser: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """An edge for our `CifUser`. May be used by Relay 1."""
  cifUserEdge(
    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCifUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFormChangeByRowId` mutation."""
input DeleteFormChangeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the form_change"""
  rowId: Int!
}

"""All input for the `deleteFormChange` mutation."""
input DeleteFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormChange` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FormChange` mutation."""
type DeleteFormChangePayload {
  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFormChangeId: ID

  """The `FormChange` that was deleted by this mutation."""
  formChange: FormChange

  """An edge for our `FormChange`. May be used by Relay 1."""
  formChangeEdge(
    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge

  """Reads a single `ProjectRevision` that is related to this `FormChange`."""
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFundingStreamByRowId` mutation."""
input DeleteFundingStreamByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the funding_stream"""
  rowId: Int!
}

"""All input for the `deleteFundingStream` mutation."""
input DeleteFundingStreamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FundingStream` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FundingStream` mutation."""
type DeleteFundingStreamPayload {
  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFundingStreamId: ID

  """The `FundingStream` that was deleted by this mutation."""
  fundingStream: FundingStream

  """An edge for our `FundingStream`. May be used by Relay 1."""
  fundingStreamEdge(
    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProjectManagerByRowId` mutation."""
input DeleteProjectManagerByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the project manager record"""
  rowId: Int!
}

"""All input for the `deleteProjectManager` mutation."""
input DeleteProjectManagerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectManager` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ProjectManager` mutation."""
type DeleteProjectManagerPayload {
  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCifUserId: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectManagerId: ID

  """Reads a single `Project` that is related to this `ProjectManager`."""
  projectByProjectId: Project

  """The `ProjectManager` that was deleted by this mutation."""
  projectManager: ProjectManager

  """An edge for our `ProjectManager`. May be used by Relay 1."""
  projectManagerEdge(
    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProjectRevisionByRowId` mutation."""
input DeleteProjectRevisionByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the project revision"""
  rowId: Int!
}

"""All input for the `deleteProjectRevision` mutation."""
input DeleteProjectRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectRevision` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ProjectRevision` mutation."""
type DeleteProjectRevisionPayload {
  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectRevisionId: ID

  """Reads a single `Project` that is related to this `ProjectRevision`."""
  projectByProjectId: Project

  """The `ProjectRevision` that was deleted by this mutation."""
  projectRevision: ProjectRevision

  """An edge for our `ProjectRevision`. May be used by Relay 1."""
  projectRevisionEdge(
    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Table tracking individual changes to database records"""
type FormChange implements Node {
  """The reason for the change"""
  changeReason: String

  """
  The change status of this form change, foreign key to cif.change_status.
  """
  changeStatus: String

  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByUpdatedBy: CifUser

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """The id of the record on which this form change applies"""
  formDataRecordId: Int

  """The schema on which this form change applies"""
  formDataSchemaName: String

  """The table on which this form change applies"""
  formDataTableName: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the form_change"""
  newFormData: JSON

  """The SQL operation this form change describes: INSERT or UPDATE"""
  operation: String

  """Reads a single `ProjectRevision` that is related to this `FormChange`."""
  projectRevisionByProjectRevisionId: ProjectRevision

  """The project revision this change might be associated with (if known)"""
  projectRevisionId: Int

  """Unique ID for the form_change"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `FormChange` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FormChangeCondition {
  """Checks for equality with the object’s `changeReason` field."""
  changeReason: String

  """Checks for equality with the object’s `changeStatus` field."""
  changeStatus: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `formDataRecordId` field."""
  formDataRecordId: Int

  """Checks for equality with the object’s `formDataSchemaName` field."""
  formDataSchemaName: String

  """Checks for equality with the object’s `formDataTableName` field."""
  formDataTableName: String

  """Checks for equality with the object’s `newFormData` field."""
  newFormData: JSON

  """Checks for equality with the object’s `operation` field."""
  operation: String

  """Checks for equality with the object’s `projectRevisionId` field."""
  projectRevisionId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `FormChange` object types. All fields are combined with a logical ‘and.’
"""
input FormChangeFilter {
  """Checks for all expressions in this list."""
  and: [FormChangeFilter!]

  """Filter by the object’s `changeReason` field."""
  changeReason: StringFilter

  """Filter by the object’s `changeStatus` field."""
  changeStatus: StringFilter

  """Filter by the object’s `changeStatusByChangeStatus` relation."""
  changeStatusByChangeStatus: ChangeStatusFilter

  """A related `changeStatusByChangeStatus` exists."""
  changeStatusByChangeStatusExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByDeletedBy` relation."""
  cifUserByDeletedBy: CifUserFilter

  """A related `cifUserByDeletedBy` exists."""
  cifUserByDeletedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `formDataRecordId` field."""
  formDataRecordId: IntFilter

  """Filter by the object’s `formDataSchemaName` field."""
  formDataSchemaName: StringFilter

  """Filter by the object’s `formDataTableName` field."""
  formDataTableName: StringFilter

  """Filter by the object’s `newFormData` field."""
  newFormData: JSONFilter

  """Negates the expression."""
  not: FormChangeFilter

  """Filter by the object’s `operation` field."""
  operation: StringFilter

  """Checks for any expressions in this list."""
  or: [FormChangeFilter!]

  """Filter by the object’s `projectRevisionByProjectRevisionId` relation."""
  projectRevisionByProjectRevisionId: ProjectRevisionFilter

  """A related `projectRevisionByProjectRevisionId` exists."""
  projectRevisionByProjectRevisionIdExists: Boolean

  """Filter by the object’s `projectRevisionId` field."""
  projectRevisionId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `FormChange`"""
input FormChangeInput {
  """The reason for the change"""
  changeReason: String

  """
  The change status of this form change, foreign key to cif.change_status.
  """
  changeStatus: String

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """The id of the record on which this form change applies"""
  formDataRecordId: Int

  """The schema on which this form change applies"""
  formDataSchemaName: String

  """The table on which this form change applies"""
  formDataTableName: String

  """Unique ID for the form_change"""
  newFormData: JSON

  """The SQL operation this form change describes: INSERT or UPDATE"""
  operation: String

  """The project revision this change might be associated with (if known)"""
  projectRevisionId: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `FormChange`. Fields that are set will be updated.
"""
input FormChangePatch {
  """The reason for the change"""
  changeReason: String

  """
  The change status of this form change, foreign key to cif.change_status.
  """
  changeStatus: String

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """The id of the record on which this form change applies"""
  formDataRecordId: Int

  """The schema on which this form change applies"""
  formDataSchemaName: String

  """The table on which this form change applies"""
  formDataTableName: String

  """Unique ID for the form_change"""
  newFormData: JSON

  """The SQL operation this form change describes: INSERT or UPDATE"""
  operation: String

  """The project revision this change might be associated with (if known)"""
  projectRevisionId: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `FormChange` values."""
type FormChangesConnection {
  """
  A list of edges which contains the `FormChange` and cursor to aid in pagination.
  """
  edges: [FormChangesEdge!]!

  """A list of `FormChange` objects."""
  nodes: [FormChange]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormChange` you could get from the connection."""
  totalCount: Int!
}

"""A `FormChange` edge in the connection."""
type FormChangesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormChange` at the end of the edge."""
  node: FormChange
}

"""Methods to use when ordering `FormChange`."""
enum FormChangesOrderBy {
  CHANGE_REASON_ASC
  CHANGE_REASON_DESC
  CHANGE_STATUS_ASC
  CHANGE_STATUS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  FORM_DATA_RECORD_ID_ASC
  FORM_DATA_RECORD_ID_DESC
  FORM_DATA_SCHEMA_NAME_ASC
  FORM_DATA_SCHEMA_NAME_DESC
  FORM_DATA_TABLE_NAME_ASC
  FORM_DATA_TABLE_NAME_DESC
  ID_ASC
  ID_DESC
  NATURAL
  NEW_FORM_DATA_ASC
  NEW_FORM_DATA_DESC
  OPERATION_ASC
  OPERATION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_REVISION_ID_ASC
  PROJECT_REVISION_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table containing information about a CIF funding_stream"""
type FundingStream implements Node {
  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectFundingStreamIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamCifUsersByProjectFundingStreamIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectFundingStreamIdAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamCifUsersByProjectFundingStreamIdAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectFundingStreamIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamCifUsersByProjectFundingStreamIdAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """Description of the funding_stream"""
  description: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Shortname of the funding stream program"""
  name: String!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByProjectFundingStreamIdAndOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamOperatorsByProjectFundingStreamIdAndOperatorIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Unique ID for the funding_stream"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type FundingStreamCifUsersByProjectFundingStreamIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamCifUsersByProjectFundingStreamIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type FundingStreamCifUsersByProjectFundingStreamIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type FundingStreamCifUsersByProjectFundingStreamIdAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamCifUsersByProjectFundingStreamIdAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type FundingStreamCifUsersByProjectFundingStreamIdAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type FundingStreamCifUsersByProjectFundingStreamIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamCifUsersByProjectFundingStreamIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type FundingStreamCifUsersByProjectFundingStreamIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A condition to be used against `FundingStream` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FundingStreamCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `FundingStream` object types. All fields are combined with a logical ‘and.’
"""
input FundingStreamFilter {
  """Checks for all expressions in this list."""
  and: [FundingStreamFilter!]

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByDeletedBy` relation."""
  cifUserByDeletedBy: CifUserFilter

  """A related `cifUserByDeletedBy` exists."""
  cifUserByDeletedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: FundingStreamFilter

  """Checks for any expressions in this list."""
  or: [FundingStreamFilter!]

  """Filter by the object’s `projectsByFundingStreamId` relation."""
  projectsByFundingStreamId: FundingStreamToManyProjectFilter

  """Some related `projectsByFundingStreamId` exist."""
  projectsByFundingStreamIdExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `FundingStream`"""
input FundingStreamInput {
  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """Description of the funding_stream"""
  description: String!

  """Shortname of the funding stream program"""
  name: String!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `Operator` values, with data from `Project`."""
type FundingStreamOperatorsByProjectFundingStreamIdAndOperatorIdManyToManyConnection {
  """
  A list of edges which contains the `Operator`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamOperatorsByProjectFundingStreamIdAndOperatorIdManyToManyEdge!]!

  """A list of `Operator` objects."""
  nodes: [Operator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operator` you could get from the connection."""
  totalCount: Int!
}

"""A `Operator` edge in the connection, with data from `Project`."""
type FundingStreamOperatorsByProjectFundingStreamIdAndOperatorIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operator` at the end of the edge."""
  node: Operator

  """Reads and enables pagination through a set of `Project`."""
  projectsByOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
Represents an update to a `FundingStream`. Fields that are set will be updated.
"""
input FundingStreamPatch {
  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """Description of the funding_stream"""
  description: String

  """Shortname of the funding stream program"""
  name: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A filter to be used against many `Project` object types. All fields are combined with a logical ‘and.’
"""
input FundingStreamToManyProjectFilter {
  """
  Every related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectFilter

  """
  No related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectFilter

  """
  Some related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectFilter
}

"""A connection to a list of `FundingStream` values."""
type FundingStreamsConnection {
  """
  A list of edges which contains the `FundingStream` and cursor to aid in pagination.
  """
  edges: [FundingStreamsEdge!]!

  """A list of `FundingStream` objects."""
  nodes: [FundingStream]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FundingStream` you could get from the connection."""
  totalCount: Int!
}

"""A `FundingStream` edge in the connection."""
type FundingStreamsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStream` at the end of the edge."""
  node: FundingStream
}

"""Methods to use when ordering `FundingStream`."""
enum FundingStreamsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """Contained by the specified JSON."""
  containedBy: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contains the specified key."""
  containsKey: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value."""
  equalTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Included in the specified list."""
  in: [JSON!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """Not included in the specified list."""
  notIn: [JSON!]
}

type KeycloakJwt {
  acr: String
  aud: String
  authTime: Int
  azp: String
  brokerSessionId: String

  """Reads a single `CifUser` that is related to this `KeycloakJwt`."""
  cifUserBySub: CifUser
  email: String
  emailVerified: Boolean
  exp: Int
  familyName: String
  givenName: String
  iat: Int
  iss: String
  jti: UUID
  name: String
  nbf: Int
  preferredUsername: String
  priorityGroup: String
  sessionState: UUID
  sub: UUID
  typ: String
  userGroups: [String]
}

"""
A filter to be used against `KeycloakJwt` object types. All fields are combined with a logical ‘and.’
"""
input KeycloakJwtFilter {
  """Filter by the object’s `acr` field."""
  acr: StringFilter

  """Checks for all expressions in this list."""
  and: [KeycloakJwtFilter!]

  """Filter by the object’s `aud` field."""
  aud: StringFilter

  """Filter by the object’s `authTime` field."""
  authTime: IntFilter

  """Filter by the object’s `azp` field."""
  azp: StringFilter

  """Filter by the object’s `brokerSessionId` field."""
  brokerSessionId: StringFilter

  """Filter by the object’s `cifUserBySub` relation."""
  cifUserBySub: CifUserFilter

  """A related `cifUserBySub` exists."""
  cifUserBySubExists: Boolean

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `emailVerified` field."""
  emailVerified: BooleanFilter

  """Filter by the object’s `exp` field."""
  exp: IntFilter

  """Filter by the object’s `familyName` field."""
  familyName: StringFilter

  """Filter by the object’s `givenName` field."""
  givenName: StringFilter

  """Filter by the object’s `iat` field."""
  iat: IntFilter

  """Filter by the object’s `iss` field."""
  iss: StringFilter

  """Filter by the object’s `jti` field."""
  jti: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `nbf` field."""
  nbf: IntFilter

  """Negates the expression."""
  not: KeycloakJwtFilter

  """Checks for any expressions in this list."""
  or: [KeycloakJwtFilter!]

  """Filter by the object’s `preferredUsername` field."""
  preferredUsername: StringFilter

  """Filter by the object’s `priorityGroup` field."""
  priorityGroup: StringFilter

  """Filter by the object’s `sessionState` field."""
  sessionState: UUIDFilter

  """Filter by the object’s `sub` field."""
  sub: UUIDFilter

  """Filter by the object’s `typ` field."""
  typ: StringFilter

  """Filter by the object’s `userGroups` field."""
  userGroups: StringListFilter
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Attachment`."""
  createAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAttachmentInput!
  ): CreateAttachmentPayload

  """Creates a single `ChangeStatus`."""
  createChangeStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChangeStatusInput!
  ): CreateChangeStatusPayload

  """Creates a single `CifUser`."""
  createCifUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCifUserInput!
  ): CreateCifUserPayload

  """Creates a single `FormChange`."""
  createFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormChangeInput!
  ): CreateFormChangePayload

  """Creates a single `FundingStream`."""
  createFundingStream(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFundingStreamInput!
  ): CreateFundingStreamPayload
  createProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectInput!
  ): CreateProjectPayload

  """Creates a single `ProjectManager`."""
  createProjectManager(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectManagerInput!
  ): CreateProjectManagerPayload

  """Creates a single `ProjectRevision`."""
  createProjectRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectRevisionInput!
  ): CreateProjectRevisionPayload
  createUserFromSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserFromSessionInput!
  ): CreateUserFromSessionPayload

  """Deletes a single `Attachment` using its globally unique id."""
  deleteAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttachmentInput!
  ): DeleteAttachmentPayload

  """Deletes a single `Attachment` using a unique key."""
  deleteAttachmentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttachmentByRowIdInput!
  ): DeleteAttachmentPayload

  """Deletes a single `ChangeStatus` using its globally unique id."""
  deleteChangeStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChangeStatusInput!
  ): DeleteChangeStatusPayload

  """Deletes a single `ChangeStatus` using a unique key."""
  deleteChangeStatusByStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChangeStatusByStatusInput!
  ): DeleteChangeStatusPayload

  """Deletes a single `CifUser` using its globally unique id."""
  deleteCifUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCifUserInput!
  ): DeleteCifUserPayload

  """Deletes a single `CifUser` using a unique key."""
  deleteCifUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCifUserByRowIdInput!
  ): DeleteCifUserPayload

  """Deletes a single `FormChange` using its globally unique id."""
  deleteFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormChangeInput!
  ): DeleteFormChangePayload

  """Deletes a single `FormChange` using a unique key."""
  deleteFormChangeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormChangeByRowIdInput!
  ): DeleteFormChangePayload

  """Deletes a single `FundingStream` using its globally unique id."""
  deleteFundingStream(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamInput!
  ): DeleteFundingStreamPayload

  """Deletes a single `FundingStream` using a unique key."""
  deleteFundingStreamByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamByRowIdInput!
  ): DeleteFundingStreamPayload

  """Deletes a single `ProjectManager` using its globally unique id."""
  deleteProjectManager(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectManagerInput!
  ): DeleteProjectManagerPayload

  """Deletes a single `ProjectManager` using a unique key."""
  deleteProjectManagerByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectManagerByRowIdInput!
  ): DeleteProjectManagerPayload

  """Deletes a single `ProjectRevision` using its globally unique id."""
  deleteProjectRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectRevisionInput!
  ): DeleteProjectRevisionPayload

  """Deletes a single `ProjectRevision` using a unique key."""
  deleteProjectRevisionByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectRevisionByRowIdInput!
  ): DeleteProjectRevisionPayload

  """
  Updates a single `Attachment` using its globally unique id and a patch.
  """
  updateAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttachmentInput!
  ): UpdateAttachmentPayload

  """Updates a single `Attachment` using a unique key and a patch."""
  updateAttachmentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttachmentByRowIdInput!
  ): UpdateAttachmentPayload

  """
  Updates a single `ChangeStatus` using its globally unique id and a patch.
  """
  updateChangeStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChangeStatusInput!
  ): UpdateChangeStatusPayload

  """Updates a single `ChangeStatus` using a unique key and a patch."""
  updateChangeStatusByStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChangeStatusByStatusInput!
  ): UpdateChangeStatusPayload

  """Updates a single `CifUser` using its globally unique id and a patch."""
  updateCifUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCifUserInput!
  ): UpdateCifUserPayload

  """Updates a single `CifUser` using a unique key and a patch."""
  updateCifUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCifUserByRowIdInput!
  ): UpdateCifUserPayload

  """
  Updates a single `FormChange` using its globally unique id and a patch.
  """
  updateFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormChangeInput!
  ): UpdateFormChangePayload

  """Updates a single `FormChange` using a unique key and a patch."""
  updateFormChangeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormChangeByRowIdInput!
  ): UpdateFormChangePayload

  """
  Updates a single `FundingStream` using its globally unique id and a patch.
  """
  updateFundingStream(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamInput!
  ): UpdateFundingStreamPayload

  """Updates a single `FundingStream` using a unique key and a patch."""
  updateFundingStreamByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamByRowIdInput!
  ): UpdateFundingStreamPayload

  """
  Updates a single `ProjectManager` using its globally unique id and a patch.
  """
  updateProjectManager(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectManagerInput!
  ): UpdateProjectManagerPayload

  """Updates a single `ProjectManager` using a unique key and a patch."""
  updateProjectManagerByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectManagerByRowIdInput!
  ): UpdateProjectManagerPayload

  """
  Updates a single `ProjectRevision` using its globally unique id and a patch.
  """
  updateProjectRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectRevisionInput!
  ): UpdateProjectRevisionPayload

  """Updates a single `ProjectRevision` using a unique key and a patch."""
  updateProjectRevisionByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectRevisionByRowIdInput!
  ): UpdateProjectRevisionPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Table containing information about a CIF operator"""
type Operator implements Node {
  """The bc registry id assigned to this operator"""
  bcRegistryId: String

  """Reads a single `CifUser` that is related to this `Operator`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Operator`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `Operator`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectOperatorIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorCifUsersByProjectOperatorIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectOperatorIdAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorCifUsersByProjectOperatorIdAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectOperatorIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorCifUsersByProjectOperatorIdAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByProjectOperatorIdAndFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorFundingStreamsByProjectOperatorIdAndFundingStreamIdManyToManyConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The legal name of this operator"""
  legalName: String

  """Reads and enables pagination through a set of `Project`."""
  projectsByOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Unique ID for the operator"""
  rowId: Int!

  """The trade name of this operator"""
  tradeName: String

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type OperatorCifUsersByProjectOperatorIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [OperatorCifUsersByProjectOperatorIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type OperatorCifUsersByProjectOperatorIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type OperatorCifUsersByProjectOperatorIdAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [OperatorCifUsersByProjectOperatorIdAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type OperatorCifUsersByProjectOperatorIdAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type OperatorCifUsersByProjectOperatorIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [OperatorCifUsersByProjectOperatorIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type OperatorCifUsersByProjectOperatorIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A condition to be used against `Operator` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OperatorCondition {
  """Checks for equality with the object’s `bcRegistryId` field."""
  bcRegistryId: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `legalName` field."""
  legalName: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `tradeName` field."""
  tradeName: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `Operator` object types. All fields are combined with a logical ‘and.’
"""
input OperatorFilter {
  """Checks for all expressions in this list."""
  and: [OperatorFilter!]

  """Filter by the object’s `bcRegistryId` field."""
  bcRegistryId: StringFilter

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByDeletedBy` relation."""
  cifUserByDeletedBy: CifUserFilter

  """A related `cifUserByDeletedBy` exists."""
  cifUserByDeletedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `legalName` field."""
  legalName: StringFilter

  """Negates the expression."""
  not: OperatorFilter

  """Checks for any expressions in this list."""
  or: [OperatorFilter!]

  """Filter by the object’s `projectsByOperatorId` relation."""
  projectsByOperatorId: OperatorToManyProjectFilter

  """Some related `projectsByOperatorId` exist."""
  projectsByOperatorIdExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `tradeName` field."""
  tradeName: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""
A connection to a list of `FundingStream` values, with data from `Project`.
"""
type OperatorFundingStreamsByProjectOperatorIdAndFundingStreamIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStream`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [OperatorFundingStreamsByProjectOperatorIdAndFundingStreamIdManyToManyEdge!]!

  """A list of `FundingStream` objects."""
  nodes: [FundingStream]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FundingStream` you could get from the connection."""
  totalCount: Int!
}

"""A `FundingStream` edge in the connection, with data from `Project`."""
type OperatorFundingStreamsByProjectOperatorIdAndFundingStreamIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStream` at the end of the edge."""
  node: FundingStream

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A filter to be used against many `Project` object types. All fields are combined with a logical ‘and.’
"""
input OperatorToManyProjectFilter {
  """
  Every related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectFilter

  """
  No related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectFilter

  """
  Some related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectFilter
}

"""A connection to a list of `Operator` values."""
type OperatorsConnection {
  """
  A list of edges which contains the `Operator` and cursor to aid in pagination.
  """
  edges: [OperatorsEdge!]!

  """A list of `Operator` objects."""
  nodes: [Operator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operator` you could get from the connection."""
  totalCount: Int!
}

"""A `Operator` edge in the connection."""
type OperatorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operator` at the end of the edge."""
  node: Operator
}

"""Methods to use when ordering `Operator`."""
enum OperatorsOrderBy {
  BC_REGISTRY_ID_ASC
  BC_REGISTRY_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  ID_ASC
  ID_DESC
  LEGAL_NAME_ASC
  LEGAL_NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TRADE_NAME_ASC
  TRADE_NAME_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""Table containing information about a CIF Project"""
type Project implements Node {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByProjectRevisionProjectIdAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectChangeStatusesByProjectRevisionProjectIdAndChangeStatusManyToManyConnection!

  """Reads a single `CifUser` that is related to this `Project`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Project`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `Project`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectIdAndCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectManagerProjectIdAndCifUserIdManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectManagerProjectIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectIdAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectManagerProjectIdAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectManagerProjectIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionProjectIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectRevisionProjectIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionProjectIdAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectRevisionProjectIdAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionProjectIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectRevisionProjectIdAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """Description of the project"""
  description: String!

  """Reads a single `FundingStream` that is related to this `Project`."""
  fundingStreamByFundingStreamId: FundingStream

  """
  The id of the funding_stream (cif.funding_stream.id) that was selected when creating the project
  """
  fundingStreamId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads a single `Operator` that is related to this `Project`."""
  operatorByOperatorId: Operator

  """Foreign key references the cif.operator table"""
  operatorId: Int!

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!

  """The name of the project"""
  projectName: String!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!

  """
  Unique identifier internal to the CIF team, in the form YYYY-RFP-0-000-ABCD. This will most likely be generated by the application in the future.
  """
  rfpNumber: String!

  """Unique ID for the project"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `ChangeStatus` values, with data from `ProjectRevision`.
"""
type ProjectChangeStatusesByProjectRevisionProjectIdAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ProjectChangeStatusesByProjectRevisionProjectIdAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ChangeStatus` edge in the connection, with data from `ProjectRevision`.
"""
type ProjectChangeStatusesByProjectRevisionProjectIdAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectCifUsersByProjectManagerProjectIdAndCifUserIdManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectManagerProjectIdAndCifUserIdManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectCifUsersByProjectManagerProjectIdAndCifUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectCifUsersByProjectManagerProjectIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectManagerProjectIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectCifUsersByProjectManagerProjectIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectCifUsersByProjectManagerProjectIdAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectManagerProjectIdAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectCifUsersByProjectManagerProjectIdAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectCifUsersByProjectManagerProjectIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectManagerProjectIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectCifUsersByProjectManagerProjectIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type ProjectCifUsersByProjectRevisionProjectIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectRevisionProjectIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type ProjectCifUsersByProjectRevisionProjectIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type ProjectCifUsersByProjectRevisionProjectIdAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectRevisionProjectIdAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type ProjectCifUsersByProjectRevisionProjectIdAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type ProjectCifUsersByProjectRevisionProjectIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectRevisionProjectIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type ProjectCifUsersByProjectRevisionProjectIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A condition to be used against `Project` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProjectCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `fundingStreamId` field."""
  fundingStreamId: Int

  """Checks for equality with the object’s `operatorId` field."""
  operatorId: Int

  """Checks for equality with the object’s `projectName` field."""
  projectName: String

  """Checks for equality with the object’s `rfpNumber` field."""
  rfpNumber: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `Project` object types. All fields are combined with a logical ‘and.’
"""
input ProjectFilter {
  """Checks for all expressions in this list."""
  and: [ProjectFilter!]

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByDeletedBy` relation."""
  cifUserByDeletedBy: CifUserFilter

  """A related `cifUserByDeletedBy` exists."""
  cifUserByDeletedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `fundingStreamByFundingStreamId` relation."""
  fundingStreamByFundingStreamId: FundingStreamFilter

  """Filter by the object’s `fundingStreamId` field."""
  fundingStreamId: IntFilter

  """Negates the expression."""
  not: ProjectFilter

  """Filter by the object’s `operatorByOperatorId` relation."""
  operatorByOperatorId: OperatorFilter

  """Filter by the object’s `operatorId` field."""
  operatorId: IntFilter

  """Checks for any expressions in this list."""
  or: [ProjectFilter!]

  """Filter by the object’s `projectManagersByProjectId` relation."""
  projectManagersByProjectId: ProjectToManyProjectManagerFilter

  """Some related `projectManagersByProjectId` exist."""
  projectManagersByProjectIdExist: Boolean

  """Filter by the object’s `projectName` field."""
  projectName: StringFilter

  """Filter by the object’s `projectRevisionsByProjectId` relation."""
  projectRevisionsByProjectId: ProjectToManyProjectRevisionFilter

  """Some related `projectRevisionsByProjectId` exist."""
  projectRevisionsByProjectIdExist: Boolean

  """Filter by the object’s `rfpNumber` field."""
  rfpNumber: StringFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""
Join table to track assignment of cif users to projects, as project managers
"""
type ProjectManager implements Node {
  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCifUserId: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByUpdatedBy: CifUser

  """Foreign key to the cif user"""
  cifUserId: Int!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads a single `Project` that is related to this `ProjectManager`."""
  projectByProjectId: Project

  """Foreign key to the project"""
  projectId: Int!

  """Unique ID for the project manager record"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `ProjectManager` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectManagerCondition {
  """Checks for equality with the object’s `cifUserId` field."""
  cifUserId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ProjectManager` object types. All fields are combined with a logical ‘and.’
"""
input ProjectManagerFilter {
  """Checks for all expressions in this list."""
  and: [ProjectManagerFilter!]

  """Filter by the object’s `cifUserByCifUserId` relation."""
  cifUserByCifUserId: CifUserFilter

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByDeletedBy` relation."""
  cifUserByDeletedBy: CifUserFilter

  """A related `cifUserByDeletedBy` exists."""
  cifUserByDeletedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `cifUserId` field."""
  cifUserId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Negates the expression."""
  not: ProjectManagerFilter

  """Checks for any expressions in this list."""
  or: [ProjectManagerFilter!]

  """Filter by the object’s `projectByProjectId` relation."""
  projectByProjectId: ProjectFilter

  """Filter by the object’s `projectId` field."""
  projectId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `ProjectManager`"""
input ProjectManagerInput {
  """Foreign key to the cif user"""
  cifUserId: Int!

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """Foreign key to the project"""
  projectId: Int!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `ProjectManager`. Fields that are set will be updated.
"""
input ProjectManagerPatch {
  """Foreign key to the cif user"""
  cifUserId: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """Foreign key to the project"""
  projectId: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `ProjectManager` values."""
type ProjectManagersConnection {
  """
  A list of edges which contains the `ProjectManager` and cursor to aid in pagination.
  """
  edges: [ProjectManagersEdge!]!

  """A list of `ProjectManager` objects."""
  nodes: [ProjectManager]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectManager` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectManager` edge in the connection."""
type ProjectManagersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectManager` at the end of the edge."""
  node: ProjectManager
}

"""Methods to use when ordering `ProjectManager`."""
enum ProjectManagersOrderBy {
  CIF_USER_ID_ASC
  CIF_USER_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table containing all the changes for a project revision"""
type ProjectRevision implements Node {
  """Foreign key to the status of the project revision"""
  changeStatus: String

  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByFormChangeProjectRevisionIdAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionChangeStatusesByFormChangeProjectRevisionIdAndChangeStatusManyToManyConnection!

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeProjectRevisionIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeProjectRevisionIdAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeProjectRevisionIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads a single `Project` that is related to this `ProjectRevision`."""
  projectByProjectId: Project

  """
  Computed column for graphql to retrieve the change related to the project manager association, within a project revision
  """
  projectFormChange: FormChange

  """
  Foreign key to the associated project row. Will be null if the project hasn't been committed yet.
  """
  projectId: Int
  projectManagerFormChange: FormChange

  """Unique ID for the project revision"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `ChangeStatus` values, with data from `FormChange`.
"""
type ProjectRevisionChangeStatusesByFormChangeProjectRevisionIdAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ProjectRevisionChangeStatusesByFormChangeProjectRevisionIdAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ChangeStatus` edge in the connection, with data from `FormChange`."""
type ProjectRevisionChangeStatusesByFormChangeProjectRevisionIdAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndDeletedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A condition to be used against `ProjectRevision` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectRevisionCondition {
  """Checks for equality with the object’s `changeStatus` field."""
  changeStatus: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ProjectRevision` object types. All fields are combined with a logical ‘and.’
"""
input ProjectRevisionFilter {
  """Checks for all expressions in this list."""
  and: [ProjectRevisionFilter!]

  """Filter by the object’s `changeStatus` field."""
  changeStatus: StringFilter

  """Filter by the object’s `changeStatusByChangeStatus` relation."""
  changeStatusByChangeStatus: ChangeStatusFilter

  """A related `changeStatusByChangeStatus` exists."""
  changeStatusByChangeStatusExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByDeletedBy` relation."""
  cifUserByDeletedBy: CifUserFilter

  """A related `cifUserByDeletedBy` exists."""
  cifUserByDeletedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `formChangesByProjectRevisionId` relation."""
  formChangesByProjectRevisionId: ProjectRevisionToManyFormChangeFilter

  """Some related `formChangesByProjectRevisionId` exist."""
  formChangesByProjectRevisionIdExist: Boolean

  """Negates the expression."""
  not: ProjectRevisionFilter

  """Checks for any expressions in this list."""
  or: [ProjectRevisionFilter!]

  """Filter by the object’s `projectByProjectId` relation."""
  projectByProjectId: ProjectFilter

  """A related `projectByProjectId` exists."""
  projectByProjectIdExists: Boolean

  """Filter by the object’s `projectId` field."""
  projectId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `ProjectRevision`"""
input ProjectRevisionInput {
  """Foreign key to the status of the project revision"""
  changeStatus: String

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """
  Foreign key to the associated project row. Will be null if the project hasn't been committed yet.
  """
  projectId: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `ProjectRevision`. Fields that are set will be updated.
"""
input ProjectRevisionPatch {
  """Foreign key to the status of the project revision"""
  changeStatus: String

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """deleted at timestamp"""
  deletedAt: Datetime

  """deleted by user id"""
  deletedBy: Int

  """
  Foreign key to the associated project row. Will be null if the project hasn't been committed yet.
  """
  projectId: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A filter to be used against many `FormChange` object types. All fields are combined with a logical ‘and.’
"""
input ProjectRevisionToManyFormChangeFilter {
  """
  Every related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormChangeFilter

  """
  No related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormChangeFilter

  """
  Some related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormChangeFilter
}

"""A connection to a list of `ProjectRevision` values."""
type ProjectRevisionsConnection {
  """
  A list of edges which contains the `ProjectRevision` and cursor to aid in pagination.
  """
  edges: [ProjectRevisionsEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ProjectRevision` edge in the connection."""
type ProjectRevisionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision
}

"""Methods to use when ordering `ProjectRevision`."""
enum ProjectRevisionsOrderBy {
  CHANGE_STATUS_ASC
  CHANGE_STATUS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A filter to be used against many `ProjectManager` object types. All fields are combined with a logical ‘and.’
"""
input ProjectToManyProjectManagerFilter {
  """
  Every related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectManagerFilter

  """
  No related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectManagerFilter

  """
  Some related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectManagerFilter
}

"""
A filter to be used against many `ProjectRevision` object types. All fields are combined with a logical ‘and.’
"""
input ProjectToManyProjectRevisionFilter {
  """
  Every related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectRevisionFilter

  """
  No related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectRevisionFilter

  """
  Some related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectRevisionFilter
}

"""A connection to a list of `Project` values."""
type ProjectsConnection {
  """
  A list of edges which contains the `Project` and cursor to aid in pagination.
  """
  edges: [ProjectsEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection."""
type ProjectsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project
}

"""Methods to use when ordering `Project`."""
enum ProjectsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FUNDING_STREAM_ID_ASC
  FUNDING_STREAM_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  OPERATOR_ID_ASC
  OPERATOR_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_NAME_ASC
  PROJECT_NAME_DESC
  RFP_NUMBER_ASC
  RFP_NUMBER_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `Attachment`."""
  allAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection

  """Reads and enables pagination through a set of `ChangeStatus`."""
  allChangeStatuses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection

  """Reads and enables pagination through a set of `CifUser`."""
  allCifUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection

  """Reads and enables pagination through a set of `FormChange`."""
  allFormChanges(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection

  """Reads and enables pagination through a set of `FundingStream`."""
  allFundingStreams(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection

  """Reads and enables pagination through a set of `Operator`."""
  allOperators(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection

  """Reads and enables pagination through a set of `ProjectManager`."""
  allProjectManagers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection

  """Reads and enables pagination through a set of `ProjectRevision`."""
  allProjectRevisions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection

  """Reads and enables pagination through a set of `Project`."""
  allProjects(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection

  """Reads a single `Attachment` using its globally unique `ID`."""
  attachment(
    """
    The globally unique `ID` to be used in selecting a single `Attachment`.
    """
    id: ID!
  ): Attachment
  attachmentByRowId(rowId: Int!): Attachment

  """Reads a single `ChangeStatus` using its globally unique `ID`."""
  changeStatus(
    """
    The globally unique `ID` to be used in selecting a single `ChangeStatus`.
    """
    id: ID!
  ): ChangeStatus
  changeStatusByStatus(status: String!): ChangeStatus

  """Reads a single `CifUser` using its globally unique `ID`."""
  cifUser(
    """The globally unique `ID` to be used in selecting a single `CifUser`."""
    id: ID!
  ): CifUser
  cifUserByRowId(rowId: Int!): CifUser

  """Reads a single `FormChange` using its globally unique `ID`."""
  formChange(
    """
    The globally unique `ID` to be used in selecting a single `FormChange`.
    """
    id: ID!
  ): FormChange
  formChangeByRowId(rowId: Int!): FormChange

  """Reads a single `FundingStream` using its globally unique `ID`."""
  fundingStream(
    """
    The globally unique `ID` to be used in selecting a single `FundingStream`.
    """
    id: ID!
  ): FundingStream
  fundingStreamByRowId(rowId: Int!): FundingStream

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads a single `Operator` using its globally unique `ID`."""
  operator(
    """The globally unique `ID` to be used in selecting a single `Operator`."""
    id: ID!
  ): Operator
  operatorByRowId(rowId: Int!): Operator
  pendingNewProjectRevision: ProjectRevision

  """Reads a single `Project` using its globally unique `ID`."""
  project(
    """The globally unique `ID` to be used in selecting a single `Project`."""
    id: ID!
  ): Project
  projectByRfpNumber(rfpNumber: String!): Project
  projectByRowId(rowId: Int!): Project

  """Reads a single `ProjectManager` using its globally unique `ID`."""
  projectManager(
    """
    The globally unique `ID` to be used in selecting a single `ProjectManager`.
    """
    id: ID!
  ): ProjectManager
  projectManagerByRowId(rowId: Int!): ProjectManager

  """Reads a single `ProjectRevision` using its globally unique `ID`."""
  projectRevision(
    """
    The globally unique `ID` to be used in selecting a single `ProjectRevision`.
    """
    id: ID!
  ): ProjectRevision
  projectRevisionByRowId(rowId: Int!): ProjectRevision

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  session: KeycloakJwt
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Contained by the specified list of values."""
  containedBy: [String]

  """Contains the specified list of values."""
  contains: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value."""
  equalTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  equalTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}

"""All input for the `updateAttachmentByRowId` mutation."""
input UpdateAttachmentByRowIdInput {
  """
  An object where the defined keys will be set on the `Attachment` being updated.
  """
  attachmentPatch: AttachmentPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the attachment"""
  rowId: Int!
}

"""All input for the `updateAttachment` mutation."""
input UpdateAttachmentInput {
  """
  An object where the defined keys will be set on the `Attachment` being updated.
  """
  attachmentPatch: AttachmentPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Attachment` to be updated.
  """
  id: ID!
}

"""The output of our update `Attachment` mutation."""
type UpdateAttachmentPayload {
  """The `Attachment` that was updated by this mutation."""
  attachment: Attachment

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateChangeStatusByStatus` mutation."""
input UpdateChangeStatusByStatusInput {
  """
  An object where the defined keys will be set on the `ChangeStatus` being updated.
  """
  changeStatusPatch: ChangeStatusPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the status, e.g. "pending", "committed", ..."""
  status: String!
}

"""All input for the `updateChangeStatus` mutation."""
input UpdateChangeStatusInput {
  """
  An object where the defined keys will be set on the `ChangeStatus` being updated.
  """
  changeStatusPatch: ChangeStatusPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChangeStatus` to be updated.
  """
  id: ID!
}

"""The output of our update `ChangeStatus` mutation."""
type UpdateChangeStatusPayload {
  """The `ChangeStatus` that was updated by this mutation."""
  changeStatus: ChangeStatus

  """An edge for our `ChangeStatus`. May be used by Relay 1."""
  changeStatusEdge(
    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesEdge

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCifUserByRowId` mutation."""
input UpdateCifUserByRowIdInput {
  """
  An object where the defined keys will be set on the `CifUser` being updated.
  """
  cifUserPatch: CifUserPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `updateCifUser` mutation."""
input UpdateCifUserInput {
  """
  An object where the defined keys will be set on the `CifUser` being updated.
  """
  cifUserPatch: CifUserPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CifUser` to be updated.
  """
  id: ID!
}

"""The output of our update `CifUser` mutation."""
type UpdateCifUserPayload {
  """The `CifUser` that was updated by this mutation."""
  cifUser: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """An edge for our `CifUser`. May be used by Relay 1."""
  cifUserEdge(
    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFormChangeByRowId` mutation."""
input UpdateFormChangeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormChange` being updated.
  """
  formChangePatch: FormChangePatch!

  """Unique ID for the form_change"""
  rowId: Int!
}

"""All input for the `updateFormChange` mutation."""
input UpdateFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormChange` being updated.
  """
  formChangePatch: FormChangePatch!

  """
  The globally unique `ID` which will identify a single `FormChange` to be updated.
  """
  id: ID!
}

"""The output of our update `FormChange` mutation."""
type UpdateFormChangePayload {
  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormChange` that was updated by this mutation."""
  formChange: FormChange

  """An edge for our `FormChange`. May be used by Relay 1."""
  formChangeEdge(
    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge

  """Reads a single `ProjectRevision` that is related to this `FormChange`."""
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFundingStreamByRowId` mutation."""
input UpdateFundingStreamByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingStream` being updated.
  """
  fundingStreamPatch: FundingStreamPatch!

  """Unique ID for the funding_stream"""
  rowId: Int!
}

"""All input for the `updateFundingStream` mutation."""
input UpdateFundingStreamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingStream` being updated.
  """
  fundingStreamPatch: FundingStreamPatch!

  """
  The globally unique `ID` which will identify a single `FundingStream` to be updated.
  """
  id: ID!
}

"""The output of our update `FundingStream` mutation."""
type UpdateFundingStreamPayload {
  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FundingStream` that was updated by this mutation."""
  fundingStream: FundingStream

  """An edge for our `FundingStream`. May be used by Relay 1."""
  fundingStreamEdge(
    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProjectManagerByRowId` mutation."""
input UpdateProjectManagerByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectManager` being updated.
  """
  projectManagerPatch: ProjectManagerPatch!

  """Unique ID for the project manager record"""
  rowId: Int!
}

"""All input for the `updateProjectManager` mutation."""
input UpdateProjectManagerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectManager` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ProjectManager` being updated.
  """
  projectManagerPatch: ProjectManagerPatch!
}

"""The output of our update `ProjectManager` mutation."""
type UpdateProjectManagerPayload {
  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCifUserId: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `ProjectManager`."""
  projectByProjectId: Project

  """The `ProjectManager` that was updated by this mutation."""
  projectManager: ProjectManager

  """An edge for our `ProjectManager`. May be used by Relay 1."""
  projectManagerEdge(
    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProjectRevisionByRowId` mutation."""
input UpdateProjectRevisionByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectRevision` being updated.
  """
  projectRevisionPatch: ProjectRevisionPatch!

  """Unique ID for the project revision"""
  rowId: Int!
}

"""All input for the `updateProjectRevision` mutation."""
input UpdateProjectRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectRevision` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ProjectRevision` being updated.
  """
  projectRevisionPatch: ProjectRevisionPatch!
}

"""The output of our update `ProjectRevision` mutation."""
type UpdateProjectRevisionPayload {
  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByDeletedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `ProjectRevision`."""
  projectByProjectId: Project

  """The `ProjectRevision` that was updated by this mutation."""
  projectRevision: ProjectRevision

  """An edge for our `ProjectRevision`. May be used by Relay 1."""
  projectRevisionEdge(
    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
